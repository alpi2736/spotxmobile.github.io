{
    "docs": [
        {
            "location": "/", 
            "text": "SpotX Mobile Documentation\n#\n\n\nThe links on the left will provide you with our documentation for our mobile and connected devices SDKs.\nWe Currently have SDKs/Adapters for:\n\n\n\n\nAndroid\n\n\niOS\n\n\nAppleTV\n\n\nMoPub SDK\n\n\nBrightcove", 
            "title": "Home"
        }, 
        {
            "location": "/#spotx-mobile-documentation", 
            "text": "The links on the left will provide you with our documentation for our mobile and connected devices SDKs.\nWe Currently have SDKs/Adapters for:   Android  iOS  AppleTV  MoPub SDK  Brightcove", 
            "title": "SpotX Mobile Documentation"
        }, 
        {
            "location": "/android/sdk/", 
            "text": "SpotX Android SDK Quick Start\n#\n\n\nExample code and tutorial for displaying SpotX video ads in Android apps.\n\n\nCheck out the \nSpotX Demo App\n on github for an example app.\n\n\nPrerequisites\n#\n\n\n\n\nMinimum API: 14 (Ice Cream Sandwich)\n\n\nTarget API: 24 (N)\n\n\nSpotX publisher account - \napply to become a publisher\n\n\n\n\nBefore You Begin\n#\n\n\n\n\n\n\nYou\nll need to be a SpotX publisher if you aren\nt already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the \nSpotX\nPublisher Tools\n.\n\n\n\n\n\n\nFrom the Publisher Tools you will be able to create \nchannels\n that define the\nentry point to connecting with advertisers.  You\nll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.\n\n\n\n\n\n\nInstall the SDK\n#\n\n\nGradle (preferred)\n#\n\n\nInclude the following in your \nbuild.gradle\n file:\n\n\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    compile \ncom.spotxchange:spotx-sdk-android:3.0.+\n\n}\n\n\n\n\n\nManual Installation\n#\n\n\nYou can download the latest version from the \nSpotX Android SDK Bintray\n and include it as a file dependency.\n\n\n \n\n\nSetup Your Android Manifest\n#\n\n\nThe \nAndroidManifest.xml\n file defines permissions for your applications.\n\n\nAdd \nINTERNET\n permission to the manifest file for your app, if it\ns not\nalready present.\n\n\n!--- REQUIRED FOR INTERNET ACCESS ---\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\n\nOptionally, you may also include any or all the following permissions, which will\nimprove your ad revenue.\n\n\n!--  OPTIONAL PERMISSIONS --\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_NETWORK_STATE\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_FINE_LOCATION\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.READ_PHONE_STATE\n \n/\n\n\n\n\n\n\nAdd the Google Mobile Ads API by editing your \nbuild.gradle\n file add adding the line:\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nads\n:\n9.2.0\n\n\n}\n\n\n\n\n\n\nAdd the Google Play Services meta tag with the \napplication\n tags.\n\n\n!-- Example application --\n\n\napplication\n\n    \nandroid:allowBackup=\ntrue\n\n    \nandroid:icon=\n@drawable/ic_launcher\n\n    \nandroid:label=\n@string/app_name\n\n    \nandroid:theme=\n@style/AppTheme\n \n\n    \n!-- REQUIRED --\n\n    \nmeta-data\n\n        \nandroid:name=\ncom.google.android.gms.version\n\n        \nandroid:value=\n@integer/google_play_services_version\n \n/\n\n\n/application\n\n\n\n\n\n\nYou\nre now ready to integrate with the SpotX SDK. Refer to the selections\nbelow for example integrations.\n\n\nAd Integration\n#\n\n\nAn interstitial ad appears in a modal window, requiring the user to watch it\nbefore they can access other content.\n\n\n1. Initialize the SpotX SDK\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n\n}\n\n\n\n\n\n\n2. Create a SpotXAdBuilder\n#\n\n\nThe \nSpotXAdBuilder\n is a builder class that creates an ad request. The only\nprerequisite to building an ad request is a channel id.  There are also methods\navailable to add additional ad parameters; for more information on supported ad\nparameters see our \nAdvanced Documentation\n.\nThe \nSpotXAdBuilder\n also supports custom parameters; custom parameters are\nvalues that you can pass to us and report on later.  For more information on\ncustom parameters, please contact a SpotX representative.\n\n\nSpotXAdBuilder Minimum Requirements\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n\n}\n\n\n\n\n\n\nSpotXAdBuilder With Additional Ad Parameters\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nsab\n.\nuseHTTPS\n(\ntrue\n);\n\n  \nsab\n.\nparam\n(\nmedia_transcoding[]\n,\n \nnew\n \nString\n[]{\nlow\n,\n \nmedium\n});\n\n\n}\n\n\n\n\n\n\nSpotXAdBuilder With Custom Ad Parameters\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nsab\n.\ncustom\n(\ncustomParam\n,\n \ncustomValue\n);\n\n\n}\n\n\n\n\n\n\nFor the sake of conciseness the rest of this documentation will assume you\nare doing a bare minimum integration.\n\n\n3. Load Your Ad\n#\n\n\nThe \nSpotXAdBuilder\n has four load methods:\n1. \nload()\n will load 1 ad.\n2. \nloadWithCount(int count)\n will load \ncount\n number of ads.\n3. \nloadWithDuration(double duration)\n will load a number of ads whose cumulative duration is less than or equal to \nduration\n, in seconds.\n4. \nload(double duration, int count)\n will load a maximum number of ads with a maximum cumulative duration.\n\n\nThe return value of any of our \nload\n functions is a \nFuture\nSpotXAdGroup\n; by\nreturning a \nFuture\nSpotXAdGroup\n we give you the ability to set up your\napplication without being blocked by us retrieving your ads. If you wanted to\nads to play in succession, your integration might look like:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n\n  \n// Setup your app while we load ads in the background\n\n\n}\n\n\n\n\n\n\n4. Get Your SpotXAdGroup\n#\n\n\nThe \nSpotXAdGroup\n is a container holding all of your ads and all those ad\ns\ninformation. When a \nSpotXAdGroup\n plays it will play all of your ads in\nsuccession. To resolve a \nFuture\nSpotXAdGroup\n and get your \nSpotXAdGroup\n you\nwill want to call the future\ns \nget\n method.\n\n\nThere are two \nget\n methods:\n\n\n\n\nget()\n - blocks your application until the future resolves\n\n\nget(long timeout, TimeUnit unit)\n - blocks until the future resolves or until time has ran out.\n\n\n\n\nIt is strongly recommended that you use a timeout when resolving a future.\nFor more information review the \nAndroid Future Documentation\n.\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n  \n}\n\n  \ncatch\n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n\n  \n// Setup your app while we load ads in the background\n\n\n\n\n\n\n5. Display Your Ad\n#\n\n\nOnce your have a \nSpotXAdGroup\n you can start playing ads. You can do so by\ncalling one of our presentation controllers. If you wanted to play an interstitial\nad your integration might look like:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n  \n}\n\n  \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n\n  \n// Setup your app while we load ads in the background\n\n\n  \nif\n \n(\nadGroup\n \n!=\n \nnull\n)\n \n{\n\n    \nInterstitialPresentationController\n.\nshow\n(\ngetApplicationContext\n(),\n \nadGroup\n);\n\n  \n}\n\n\n\n\n\n\nEvent Observer\n#\n\n\nThere may be times where you would like to listen to events. Events include:\n\n\n\n\nonGroupStart()\n - triggers before any ads starts playing\n\n\nonStart(SpotXAd ad)\n - triggers when a single ad starts playing\n\n\nonError(SpotXAd ad)\n - triggers if an error occurs during playtime\n\n\nonSkip(SpotXAd ad)\n - triggers if an ad gets skipped\n\n\nonClick(SpotXAd ad)\n - triggers if a user clicks through\n\n\nonTimeUpdate(SpotXAd ad, int elapsed)\n - triggers periodically and will return the current ad and the current elapsed time of the ad in milliseconds.\n\n\nonComplete(SpotXAd)\n - triggers when a single ad completes\n\n\nonGroupComplete()\n - triggers after all ads complete\n\n\n\n\nWe provide a \nSpotXAdGroup.Observer\n interface that you can implement to listen\nto these events. If this is of interest to you, then your integration might look\nlike:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n    \nadGroup\n.\nregisterObserver\n(\nnew\n \nMyObserver\n());\n\n  \n}\n\n  \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n\n  \n// Setup your app while we load ads in the background\n\n\n  \nif\n \n(\nadGroup\n \n!=\n \nnull\n)\n \n{\n\n    \nInterstitialPresentationController\n.\nshow\n(\ngetApplicationContext\n(),\n \nadGroup\n);\n\n  \n}\n\n\n  \nprivate\n \nclass\n \nMyObserver\n \nimplements\n \nSpotXAdGroup\n.\nObserver\n \n{\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonGroupStart\n()\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nStarting Group.\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonStart\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nStarting Ad\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonComplete\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Complete\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonSkip\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Skipped\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonError\n(\nSpotXAd\n \nad\n,\n \nError\n \nerror\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Error\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonGroupComplete\n()\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nGroup completed.\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonTimeUpdate\n(\nSpotXAd\n \nad\n,\n \nint\n \nelapsed\n)\n \n{\n\n          \n// do nothing\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonClick\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Clicked\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n  \n}\n\n\n}", 
            "title": "SDK Quick Start"
        }, 
        {
            "location": "/android/sdk/#spotx-android-sdk-quick-start", 
            "text": "Example code and tutorial for displaying SpotX video ads in Android apps.  Check out the  SpotX Demo App  on github for an example app.", 
            "title": "SpotX Android SDK Quick Start"
        }, 
        {
            "location": "/android/sdk/#prerequisites", 
            "text": "Minimum API: 14 (Ice Cream Sandwich)  Target API: 24 (N)  SpotX publisher account -  apply to become a publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/android/sdk/#before-you-begin", 
            "text": "You ll need to be a SpotX publisher if you aren t already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the  SpotX\nPublisher Tools .    From the Publisher Tools you will be able to create  channels  that define the\nentry point to connecting with advertisers.  You ll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.", 
            "title": "Before You Begin"
        }, 
        {
            "location": "/android/sdk/#install-the-sdk", 
            "text": "", 
            "title": "Install the SDK"
        }, 
        {
            "location": "/android/sdk/#gradle-preferred", 
            "text": "Include the following in your  build.gradle  file:  repositories {\n    jcenter()\n}\n\ndependencies {\n    compile  com.spotxchange:spotx-sdk-android:3.0.+ \n}", 
            "title": "Gradle (preferred)"
        }, 
        {
            "location": "/android/sdk/#manual-installation", 
            "text": "You can download the latest version from the  SpotX Android SDK Bintray  and include it as a file dependency.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/android/sdk/#setup-your-android-manifest", 
            "text": "The  AndroidManifest.xml  file defines permissions for your applications.  Add  INTERNET  permission to the manifest file for your app, if it s not\nalready present.  !--- REQUIRED FOR INTERNET ACCESS ---  uses-permission   android:name= android.permission.INTERNET /   Optionally, you may also include any or all the following permissions, which will\nimprove your ad revenue.  !--  OPTIONAL PERMISSIONS --  uses-permission   android:name= android.permission.ACCESS_NETWORK_STATE   /  uses-permission   android:name= android.permission.ACCESS_COARSE_LOCATION   /  uses-permission   android:name= android.permission.ACCESS_FINE_LOCATION   /  uses-permission   android:name= android.permission.READ_PHONE_STATE   /   Add the Google Mobile Ads API by editing your  build.gradle  file add adding the line:  dependencies   { \n     compile   com . google . android . gms : play - services - ads : 9.2.0  }   Add the Google Play Services meta tag with the  application  tags.  !-- Example application --  application \n     android:allowBackup= true \n     android:icon= @drawable/ic_launcher \n     android:label= @string/app_name \n     android:theme= @style/AppTheme   \n     !-- REQUIRED -- \n     meta-data \n         android:name= com.google.android.gms.version \n         android:value= @integer/google_play_services_version   /  /application   You re now ready to integrate with the SpotX SDK. Refer to the selections\nbelow for example integrations.", 
            "title": "Setup Your Android Manifest"
        }, 
        {
            "location": "/android/sdk/#ad-integration", 
            "text": "An interstitial ad appears in a modal window, requiring the user to watch it\nbefore they can access other content.", 
            "title": "Ad Integration"
        }, 
        {
            "location": "/android/sdk/#1-initialize-the-spotx-sdk", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   SpotX . initialize ( getApplicationContext ());  }", 
            "title": "1. Initialize the SpotX SDK"
        }, 
        {
            "location": "/android/sdk/#2-create-a-spotxadbuilder", 
            "text": "The  SpotXAdBuilder  is a builder class that creates an ad request. The only\nprerequisite to building an ad request is a channel id.  There are also methods\navailable to add additional ad parameters; for more information on supported ad\nparameters see our  Advanced Documentation .\nThe  SpotXAdBuilder  also supports custom parameters; custom parameters are\nvalues that you can pass to us and report on later.  For more information on\ncustom parameters, please contact a SpotX representative.", 
            "title": "2. Create a SpotXAdBuilder"
        }, 
        {
            "location": "/android/sdk/#spotxadbuilder-minimum-requirements", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId );  }", 
            "title": "SpotXAdBuilder Minimum Requirements"
        }, 
        {
            "location": "/android/sdk/#spotxadbuilder-with-additional-ad-parameters", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   sab . useHTTPS ( true ); \n   sab . param ( media_transcoding[] ,   new   String []{ low ,   medium });  }", 
            "title": "SpotXAdBuilder With Additional Ad Parameters"
        }, 
        {
            "location": "/android/sdk/#spotxadbuilder-with-custom-ad-parameters", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   sab . custom ( customParam ,   customValue );  }   For the sake of conciseness the rest of this documentation will assume you\nare doing a bare minimum integration.", 
            "title": "SpotXAdBuilder With Custom Ad Parameters"
        }, 
        {
            "location": "/android/sdk/#3-load-your-ad", 
            "text": "The  SpotXAdBuilder  has four load methods:\n1.  load()  will load 1 ad.\n2.  loadWithCount(int count)  will load  count  number of ads.\n3.  loadWithDuration(double duration)  will load a number of ads whose cumulative duration is less than or equal to  duration , in seconds.\n4.  load(double duration, int count)  will load a maximum number of ads with a maximum cumulative duration.  The return value of any of our  load  functions is a  Future SpotXAdGroup ; by\nreturning a  Future SpotXAdGroup  we give you the ability to set up your\napplication without being blocked by us retrieving your ads. If you wanted to\nads to play in succession, your integration might look like:  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n\n   // Setup your app while we load ads in the background  }", 
            "title": "3. Load Your Ad"
        }, 
        {
            "location": "/android/sdk/#4-get-your-spotxadgroup", 
            "text": "The  SpotXAdGroup  is a container holding all of your ads and all those ad s\ninformation. When a  SpotXAdGroup  plays it will play all of your ads in\nsuccession. To resolve a  Future SpotXAdGroup  and get your  SpotXAdGroup  you\nwill want to call the future s  get  method.  There are two  get  methods:   get()  - blocks your application until the future resolves  get(long timeout, TimeUnit unit)  - blocks until the future resolves or until time has ran out.   It is strongly recommended that you use a timeout when resolving a future.\nFor more information review the  Android Future Documentation .  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n\n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n\n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n   } \n   catch ( Exception   e )   { \n     // Handle exception \n   } \n\n   // Setup your app while we load ads in the background", 
            "title": "4. Get Your SpotXAdGroup"
        }, 
        {
            "location": "/android/sdk/#5-display-your-ad", 
            "text": "Once your have a  SpotXAdGroup  you can start playing ads. You can do so by\ncalling one of our presentation controllers. If you wanted to play an interstitial\nad your integration might look like:  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n   } \n   catch   ( Exception   e )   { \n     // Handle exception \n   } \n\n   // Setup your app while we load ads in the background \n\n   if   ( adGroup   !=   null )   { \n     InterstitialPresentationController . show ( getApplicationContext (),   adGroup ); \n   }", 
            "title": "5. Display Your Ad"
        }, 
        {
            "location": "/android/sdk/#event-observer", 
            "text": "There may be times where you would like to listen to events. Events include:   onGroupStart()  - triggers before any ads starts playing  onStart(SpotXAd ad)  - triggers when a single ad starts playing  onError(SpotXAd ad)  - triggers if an error occurs during playtime  onSkip(SpotXAd ad)  - triggers if an ad gets skipped  onClick(SpotXAd ad)  - triggers if a user clicks through  onTimeUpdate(SpotXAd ad, int elapsed)  - triggers periodically and will return the current ad and the current elapsed time of the ad in milliseconds.  onComplete(SpotXAd)  - triggers when a single ad completes  onGroupComplete()  - triggers after all ads complete   We provide a  SpotXAdGroup.Observer  interface that you can implement to listen\nto these events. If this is of interest to you, then your integration might look\nlike:  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n     adGroup . registerObserver ( new   MyObserver ()); \n   } \n   catch   ( Exception   e )   { \n     // Handle exception \n   } \n\n   // Setup your app while we load ads in the background \n\n   if   ( adGroup   !=   null )   { \n     InterstitialPresentationController . show ( getApplicationContext (),   adGroup ); \n   } \n\n   private   class   MyObserver   implements   SpotXAdGroup . Observer   { \n       @Override \n       public   void   onGroupStart ()   { \n           Toast . makeText ( this ,   Starting Group. ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onStart ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Starting Ad ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onComplete ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Complete ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onSkip ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Skipped ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onError ( SpotXAd   ad ,   Error   error )   { \n           Toast . makeText ( this ,   Ad Error ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onGroupComplete ()   { \n           Toast . makeText ( this ,   Group completed. ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onTimeUpdate ( SpotXAd   ad ,   int   elapsed )   { \n           // do nothing \n       } \n\n       @Override \n       public   void   onClick ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Clicked ,   Toast . LENGTH_SHORT ). show (); \n       } \n   }  }", 
            "title": "Event Observer"
        }, 
        {
            "location": "/android/sdk-advanced/", 
            "text": "SpotX Android SDK Advanced Documentation\n#\n\n\nAdvanced documentation for SpotX Android SDK\n\n\nOptional Ad Parameters\n#\n\n\nYou may specify additional parameters to refine your ad request with SpotX. The values for the following parameters should adhere to the \nOpenRTB API Specification 2.2\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp[cat]\n\n\nA string of the \nIAB content categories\n for the overall application. (e.g. \n\"IAB1\"\n)\n\n\n\n\n\n\napp[privacypolicy]\n\n\nSpecifies whether the app has a privacy policy. \n\"1\"\n means there is a policy and \n\"0\"\n means there is not.\n\n\n\n\n\n\napp[storeurl]\n\n\nFor QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request. (e.g. \n\"https://play.google.com/store/apps/details?id=com.mydomain.myapp\"\n)\n\n\n\n\n\n\napp[content][language]\n\n\nLanguage of the content. Use \nalpha-2/ISO 639-1 codes\n (e.g. \n\"en\"\n).\n\n\n\n\n\n\napp[content][contentrating]\n\n\nMPAA Content rating: \n\"G\"\n, \n\"PG\"\n, \n\"PG-13\"\n, \n\"R\"\n, \n\"NC-17\"\n\n\n\n\n\n\ndevice[dnt]\n\n\nIf \n\"1\"\n then tracking is set to true, \n\"0\"\n for false. \nRead more on how to set\n\n\n\n\n\n\n\n\nDo Not Track\n#\n\n\nTo respect the user\ns preferences of \nDo Not Track\n, SpotX detects and sets the \ndevice[dnt]\n parameter to \n\"1\"\n to NOT track, and \n\"0\"\n to allow tracking, by reading \nGoogle\ns Limit Ad Tracking Setting\n.\n\n\nWe Accomplish this by querying Google Ad Services to get the status of the \nlimit tracking\n property. The code below demonstrates how we read this setting.\n\n\nprivate\n \nboolean\n \n_isLimitTrackingEnabled\n \n=\n \ntrue\n;\n \n// Do Not Track by default\n\n\n\nnew\n \nThread\n(\nnew\n \nRunnable\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nrun\n()\n \n{\n\n        \ntry\n \n{\n\n            \nAdvertisingIdClient\n.\nInfo\n \ninfo\n \n=\n \nAdvertisingIdClient\n.\ngetAdvertisingIdInfo\n(\ngetApplicationContext\n());\n\n            \n_isLimitTrackingEnabled\n \n=\n \ninfo\n.\nisLimitAdTrackingEnabled\n();\n\n        \n}\n \ncatch\n \n(\nIOException\n \ne\n)\n \n{\n\n            \ne\n.\nprintStackTrace\n();\n\n        \n}\n \ncatch\n \n(\nGooglePlayServicesNotAvailableException\n \ne\n)\n \n{\n\n            \ne\n.\nprintStackTrace\n();\n\n        \n}\n \ncatch\n \n(\nGooglePlayServicesRepairableException\n \ne\n)\n \n{\n\n            \ne\n.\nprintStackTrace\n();\n\n        \n}\n\n    \n}\n\n\n}).\nstart\n();", 
            "title": "Advanced Documentation"
        }, 
        {
            "location": "/android/sdk-advanced/#spotx-android-sdk-advanced-documentation", 
            "text": "Advanced documentation for SpotX Android SDK", 
            "title": "SpotX Android SDK Advanced Documentation"
        }, 
        {
            "location": "/android/sdk-advanced/#optional-ad-parameters", 
            "text": "You may specify additional parameters to refine your ad request with SpotX. The values for the following parameters should adhere to the  OpenRTB API Specification 2.2 .     Parameter  Description      app[cat]  A string of the  IAB content categories  for the overall application. (e.g.  \"IAB1\" )    app[privacypolicy]  Specifies whether the app has a privacy policy.  \"1\"  means there is a policy and  \"0\"  means there is not.    app[storeurl]  For QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request. (e.g.  \"https://play.google.com/store/apps/details?id=com.mydomain.myapp\" )    app[content][language]  Language of the content. Use  alpha-2/ISO 639-1 codes  (e.g.  \"en\" ).    app[content][contentrating]  MPAA Content rating:  \"G\" ,  \"PG\" ,  \"PG-13\" ,  \"R\" ,  \"NC-17\"    device[dnt]  If  \"1\"  then tracking is set to true,  \"0\"  for false.  Read more on how to set", 
            "title": "Optional Ad Parameters"
        }, 
        {
            "location": "/android/sdk-advanced/#do-not-track", 
            "text": "To respect the user s preferences of  Do Not Track , SpotX detects and sets the  device[dnt]  parameter to  \"1\"  to NOT track, and  \"0\"  to allow tracking, by reading  Google s Limit Ad Tracking Setting .  We Accomplish this by querying Google Ad Services to get the status of the  limit tracking  property. The code below demonstrates how we read this setting.  private   boolean   _isLimitTrackingEnabled   =   true ;   // Do Not Track by default  new   Thread ( new   Runnable ()   { \n     @Override \n     public   void   run ()   { \n         try   { \n             AdvertisingIdClient . Info   info   =   AdvertisingIdClient . getAdvertisingIdInfo ( getApplicationContext ()); \n             _isLimitTrackingEnabled   =   info . isLimitAdTrackingEnabled (); \n         }   catch   ( IOException   e )   { \n             e . printStackTrace (); \n         }   catch   ( GooglePlayServicesNotAvailableException   e )   { \n             e . printStackTrace (); \n         }   catch   ( GooglePlayServicesRepairableException   e )   { \n             e . printStackTrace (); \n         } \n     }  }). start ();", 
            "title": "Do Not Track"
        }, 
        {
            "location": "/android/release-notes/", 
            "text": "Release Notes For SpotX Android SDK\n#\n\n\nLatest version: \n3.0.5\n released on \n2016-08-10\n\n\nv3.0.5\n#\n\n\n\n\nAutomatically set \nDo Not Track\n based on \nGoogle\ns Limit Ad Tracking\n setting\n\n\nAdded custom parameter method to the \nSpotXAdBuilder\n\n\nMade \nBrightcove\n a transitive dependency\n\n\nFixed issue with un-merged VAST wrappers\n\n\n\n\nv3.0.4\n#\n\n\n\n\nFixed issue with deal device targeting.\n\n\nRemoved \nno media file\n assertion.\n\n\nFixed VAST wrapper parsing.\n\n\nRemoved \ndevice[os]\n and \ndevice[devicetype]\n request parameters.\n\n\nAdded \nplayer_width\n and \nplayer_height\n request parameters.\n\n\n\n\nv3.0.3\n#\n\n\n\n\nRemoved the \ndevice[didsha1]\n and \ndevice[ip]\n request parameters.\n\n\nAdded Support for \nMoPub\n and \nBrightcove\n adapters.\n\n\n\n\nv3.0.2\n#\n\n\n\n\nAdded the \nX-Device-User-Agent\n header to all network requests.\n\n\nAdded \ndevice[ua]\n to the request parameters.\n\n\n\n\nv3.0.1\n#\n\n\n\n\nIn-content playback starts when \n 50%\n of the player is in view and stops when \n 50%\n.\n\n\n\n\nv3.0.0\n#\n\n\n\n\nNew SDK, supports playing video ads natively either interstitial or in-content.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/android/release-notes/#release-notes-for-spotx-android-sdk", 
            "text": "Latest version:  3.0.5  released on  2016-08-10", 
            "title": "Release Notes For SpotX Android SDK"
        }, 
        {
            "location": "/android/release-notes/#v305", 
            "text": "Automatically set  Do Not Track  based on  Google s Limit Ad Tracking  setting  Added custom parameter method to the  SpotXAdBuilder  Made  Brightcove  a transitive dependency  Fixed issue with un-merged VAST wrappers", 
            "title": "v3.0.5"
        }, 
        {
            "location": "/android/release-notes/#v304", 
            "text": "Fixed issue with deal device targeting.  Removed  no media file  assertion.  Fixed VAST wrapper parsing.  Removed  device[os]  and  device[devicetype]  request parameters.  Added  player_width  and  player_height  request parameters.", 
            "title": "v3.0.4"
        }, 
        {
            "location": "/android/release-notes/#v303", 
            "text": "Removed the  device[didsha1]  and  device[ip]  request parameters.  Added Support for  MoPub  and  Brightcove  adapters.", 
            "title": "v3.0.3"
        }, 
        {
            "location": "/android/release-notes/#v302", 
            "text": "Added the  X-Device-User-Agent  header to all network requests.  Added  device[ua]  to the request parameters.", 
            "title": "v3.0.2"
        }, 
        {
            "location": "/android/release-notes/#v301", 
            "text": "In-content playback starts when   50%  of the player is in view and stops when   50% .", 
            "title": "v3.0.1"
        }, 
        {
            "location": "/android/release-notes/#v300", 
            "text": "New SDK, supports playing video ads natively either interstitial or in-content.", 
            "title": "v3.0.0"
        }, 
        {
            "location": "/ios/sdk/", 
            "text": "SpotX iOS SDK Quick Start\n#\n\n\nExample code and tutorial for displaying SpotX video ads in iOS apps.\n\n\nCheck out the \nSpotX Demo App\n on github for an example app.\n\n\nPrerequisites\n#\n\n\n\n\nMinimum iOS version: 7.0\n\n\nSpotX publisher account - \napply to become a publisher\n\n\n\n\nBefore You Begin\n#\n\n\n\n\n\n\nYou\nll need to be a SpotX publisher if you aren\nt already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the \nSpotX\nPublisher Tools\n.\n\n\n\n\n\n\nFrom the Publisher Tools you will be able to create \nchannels\n that define the\nentry point to connecting with advertisers.  You\nll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.\n\n\n\n\n\n\nGetting Started\n#\n\n\nInstallation with CocoaPods (recommended)\n#\n\n\nInstallation with \nCocoaPods\n is an alternative to downloading the SDK. CocoaPods is a dependency manager for iOS and Mac apps, which automates and simplifies the process of using 3rd-party libraries in your projects.\n\n\nAdd the following pod to your \nPodfile\n:\n\n\npod\n \nSpotX-SDK\n\n\n\n\n\n\nManual Installation\n#\n\n\nDownload the latest SDK from the SpotX \nBintray Repository\n.\n\n\nThe SpotX SDK makes use of many iOS core frameworks. Add the following frameworks to your app:\n\n\n\n\nAdManager.framework\n\n\nAdSupport.framework\n\n\nCoreData.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nFoundation.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nUIKit.framework\n\n\n\n\nUnder \nBuild Settings \n Other Linker Flags\n set the following flag:\n\n\n-all_load\n\n\n\n\n\nUsing the SDK\n#\n\n\nLook at the \niOS SDK Advanced Documentation\n for more information on settings and parameters.\n\n\nShow an Ad\n#\n\n\n// File: ViewController.m\n\n\n\n@\nimport\n \nAdSupport\n;\n\n\n#import \nViewController.h\n\n\n#import \nSpotX/SpotX.h\n\n\n\n@interface\n \nViewController\n \n()\n \nSpotXAdDelegate\n\n  \n@property\n \n(\nnonatomic\n,\n \nstrong\n)\n \nSpotXView\n \n*\nadView\n;\n\n\n@end\n\n\n\n@implementation\n \nViewController\n\n\n\n-\n \n(\nvoid\n)\nviewDidLoad\n\n\n{\n\n    \n[\nsuper\n \nviewDidLoad\n];\n\n\n    \n// Required: Initialize the SpotX SDK\n\n    \n[\nSpotX\n \ninitializeWithApiKey\n:\nnil\n\n                       \ncategory\n:\n@\nIAB1\n\n                        \nsection\n:\n@\nFiction\n\n                         \ndomain\n:\n@\nwww.mydomain.com\n\n                            \nurl\n:\n@\nhttps://itunes.apple.com/us/app/my_app/id123456789\n];\n\n\n    \n// Set a default Channel ID\n\n    \n[\nSpotX\n \nsetDefaultChannelID\n:\n@\n85394\n];\n\n\n    \n// Optional: Configure default settings\n\n    \nid\nSpotXAdSettings\n \nsettings\n \n=\n \n[\nSpotX\n \ndefaultSettings\n];\n\n    \nsettings\n.\nuseHTTPS\n \n=\n \n@YES\n;\n\n    \nsettings\n.\nuseNativeBrowser\n \n=\n \n@YES\n;\n\n\n    \n// Optional: Detect and set \nDo Not Track\n parameter, i.e. \ndevice[dnt]\n parameter\n\n    \nASIdentifierManager\n \n*\nasidManager\n \n=\n \n[\nASIdentifierManager\n \nsharedManager\n];\n\n    \nsettings\n.\ntrackable\n \n=\n \n@(\nasidManager\n.\nadvertisingTrackingEnabled\n)\n;\n\n\n    \n// Optional: Configure default custom parameters (Custom Taxonomy)\n\n    \n[\nSpotX\n \nsetDefaultParameters\n:\n@{\n\n        \n@\ncustom_param\n:\n \n@\ncustom_value\n\n    \n}\n];\n\n\n    \n// Create the SpotXView and start loading an ad\n\n    \n_adView\n \n=\n \n[[\nSpotXView\n \nalloc\n]\n \ninitWithFrame\n:\nself\n.\nview\n.\nbounds\n];\n\n    \n_adView\n.\ndelegate\n \n=\n \nself\n;\n\n    \n[\n_adView\n \nstartLoading\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nshowAd\n\n\n{\n\n    \n// Show the Ad. If the ad is still loading, it may take a\n\n    \n// few seconds for the video to start.\n\n    \n[\nself\n.\nadView\n \nshow\n];\n\n\n}\n\n\n\n#pragma mark - SpotXAdDelegate\n\n\n\n-\n \n(\nvoid\n)\npresentViewController:\n(\nUIViewController\n \n*\n)\nviewControllerToPresent\n\n\n{\n\n    \n[\nself\n \npresentViewController\n:\nviewControllerToPresent\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nadLoaded\n\n\n{\n\n  \nNSLog\n(\n@\nAd is loaded and ready to play\n);\n\n  \n[\nself\n \nshowAd\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nadError:\n(\nNSString\n \n*\n)\nerror\n\n\n{\n\n  \nNSLog\n(\n@\nThere was an error with the ad: %@\n,\n \nerror\n);\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nadFailedWithError:\n(\nNSError\n \n*\n)\nerror\n\n\n{\n\n  \n// called when there is no ad available or can\nt reach ad server\n\n  \nNSLog\n(\n@\nAd Failed with error: %@\n,\n \nerror\n.\nlocalizedDescription\n);\n\n\n}\n\n\n\n@end", 
            "title": "SDK Quick Start"
        }, 
        {
            "location": "/ios/sdk/#spotx-ios-sdk-quick-start", 
            "text": "Example code and tutorial for displaying SpotX video ads in iOS apps.  Check out the  SpotX Demo App  on github for an example app.", 
            "title": "SpotX iOS SDK Quick Start"
        }, 
        {
            "location": "/ios/sdk/#prerequisites", 
            "text": "Minimum iOS version: 7.0  SpotX publisher account -  apply to become a publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/ios/sdk/#before-you-begin", 
            "text": "You ll need to be a SpotX publisher if you aren t already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the  SpotX\nPublisher Tools .    From the Publisher Tools you will be able to create  channels  that define the\nentry point to connecting with advertisers.  You ll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.", 
            "title": "Before You Begin"
        }, 
        {
            "location": "/ios/sdk/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ios/sdk/#installation-with-cocoapods-recommended", 
            "text": "Installation with  CocoaPods  is an alternative to downloading the SDK. CocoaPods is a dependency manager for iOS and Mac apps, which automates and simplifies the process of using 3rd-party libraries in your projects.  Add the following pod to your  Podfile :  pod   SpotX-SDK", 
            "title": "Installation with CocoaPods (recommended)"
        }, 
        {
            "location": "/ios/sdk/#manual-installation", 
            "text": "Download the latest SDK from the SpotX  Bintray Repository .  The SpotX SDK makes use of many iOS core frameworks. Add the following frameworks to your app:   AdManager.framework  AdSupport.framework  CoreData.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  Foundation.framework  SystemConfiguration.framework  Security.framework  UIKit.framework   Under  Build Settings   Other Linker Flags  set the following flag:  -all_load", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/ios/sdk/#using-the-sdk", 
            "text": "Look at the  iOS SDK Advanced Documentation  for more information on settings and parameters.", 
            "title": "Using the SDK"
        }, 
        {
            "location": "/ios/sdk/#show-an-ad", 
            "text": "// File: ViewController.m  @ import   AdSupport ;  #import  ViewController.h  #import  SpotX/SpotX.h  @interface   ViewController   ()   SpotXAdDelegate \n   @property   ( nonatomic ,   strong )   SpotXView   * adView ;  @end  @implementation   ViewController  -   ( void ) viewDidLoad  { \n     [ super   viewDidLoad ]; \n\n     // Required: Initialize the SpotX SDK \n     [ SpotX   initializeWithApiKey : nil \n                        category : @ IAB1 \n                         section : @ Fiction \n                          domain : @ www.mydomain.com \n                             url : @ https://itunes.apple.com/us/app/my_app/id123456789 ]; \n\n     // Set a default Channel ID \n     [ SpotX   setDefaultChannelID : @ 85394 ]; \n\n     // Optional: Configure default settings \n     id SpotXAdSettings   settings   =   [ SpotX   defaultSettings ]; \n     settings . useHTTPS   =   @YES ; \n     settings . useNativeBrowser   =   @YES ; \n\n     // Optional: Detect and set  Do Not Track  parameter, i.e.  device[dnt]  parameter \n     ASIdentifierManager   * asidManager   =   [ ASIdentifierManager   sharedManager ]; \n     settings . trackable   =   @( asidManager . advertisingTrackingEnabled ) ; \n\n     // Optional: Configure default custom parameters (Custom Taxonomy) \n     [ SpotX   setDefaultParameters : @{ \n         @ custom_param :   @ custom_value \n     } ]; \n\n     // Create the SpotXView and start loading an ad \n     _adView   =   [[ SpotXView   alloc ]   initWithFrame : self . view . bounds ]; \n     _adView . delegate   =   self ; \n     [ _adView   startLoading ];  }  -   ( void ) showAd  { \n     // Show the Ad. If the ad is still loading, it may take a \n     // few seconds for the video to start. \n     [ self . adView   show ];  }  #pragma mark - SpotXAdDelegate  -   ( void ) presentViewController: ( UIViewController   * ) viewControllerToPresent  { \n     [ self   presentViewController : viewControllerToPresent   animated : YES   completion : nil ];  }  -   ( void ) adLoaded  { \n   NSLog ( @ Ad is loaded and ready to play ); \n   [ self   showAd ];  }  -   ( void ) adError: ( NSString   * ) error  { \n   NSLog ( @ There was an error with the ad: %@ ,   error );  }  -   ( void ) adFailedWithError: ( NSError   * ) error  { \n   // called when there is no ad available or can t reach ad server \n   NSLog ( @ Ad Failed with error: %@ ,   error . localizedDescription );  }  @end", 
            "title": "Show an Ad"
        }, 
        {
            "location": "/ios/sdk-advanced/", 
            "text": "SpotX iOS SDK Advanced Documentation\n#\n\n\nAdvanced documentation for SpotX iOS SDK\n\n\nSpotX Initialize Parameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninitializeWithApiKey\n\n\nnot currently used, for future use, so pass in \nnil\n\n\n\n\n\n\ncategory\n\n\nan \nIAB category\n key that best fits the app\n\n\n\n\n\n\nsection\n\n\nthe best fit IAB section for the app pulled from a relevant \nIAB category\n\n\n\n\n\n\ndomain\n\n\nthe domain of the app or company\n\n\n\n\n\n\nurl\n\n\nthe URL of the app in the \nApp Store\n\n\n\n\n\n\n\n\nExample:\n\n\n[\nSpotX\n \ninitializeWithApiKey\n:\nnil\n\n                   \ncategory\n:\n@\nIAB1\n\n                    \nsection\n:\n@\nFiction\n\n                     \ndomain\n:\n@\nwww.mydomain.com\n\n                        \nurl\n:\n@\nhttps://itunes.apple.com/us/app/my_app/id123456789\n];\n\n\n\n\n\n\nRead more about the OpenRTB \nIAB Specification v2.0\n if you\nre interested.\n\n\nSpotXAdSettings Configuration\n#\n\n\nAll parameters take can be \n\"1\"\n for ON or \n\"0\"\n for OFF; with the exception of \nendCardDuration\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuseHTTPS\n\n\n0\n\n\nsets all ad requests to use SSL over HTTPS\n\n\n\n\n\n\nuseNativeBrowser\n\n\n0\n\n\nopen click-though links in the native Safari browser\n\n\n\n\n\n\nautoplay\n\n\n1\n\n\nplay the ad without user interaction\n\n\n\n\n\n\nskippable\n\n\n0\n\n\nallow the ad to skipped by the user\n\n\n\n\n\n\nmuted\n\n\n0\n\n\nrequest a muted ad if the volume is muted and muted is set\n\n\n\n\n\n\ntrackable\n\n\n1\n\n\nsets the \nDo Not Track\n in the ad request. \nRead about how to set \ndnt\n\n\n\n\n\n\nendCardDuration\n\n\n0\n\n\nnumber of milliseconds to show an end card after an ad, if available\n\n\n\n\n\n\nallowCalendar\n\n\n0\n\n\nallow a MRAID ad to set a calendar event\n\n\n\n\n\n\nallowPhone\n\n\n0\n\n\nallow a MRAID ad to dial a phone number\n\n\n\n\n\n\nallowSMS\n\n\n0\n\n\nallow a MRAID ad to write a text message\n\n\n\n\n\n\nallowStorage\n\n\n0\n\n\nallow a MRAID ad to save a file (usually an image)\n\n\n\n\n\n\n\n\nDo Not Track\n#\n\n\nTo respect the user\ns preferences of \nDo Not Track\n you can set the \ntrackable\n parameter to \n1\n to enable tracking, and \n0\n to NOT track.\n\n\nYou can set \nDo Not Track\n by:\n\n\n@\nimport\n \nAdSupport\n;\n\n\n\n...\n\n\n\n// init SpotX SDK\n\n\n[\nSpotX\n \ninitializeWithApiKey\n:\nnil\n\n                   \ncategory\n:\n@\nIAB1\n\n                    \nsection\n:\n@\nFiction\n\n                     \ndomain\n:\n@\nwww.mydomain.com\n\n                        \nurl\n:\n@\nhttps://itunes.apple.com/us/app/my_app/id123456789\n];\n\n\n\n// create SpotXAdSettings object\n\n\nid\nSpotXAdSettings\n \nsettings\n \n=\n \n[\nSpotX\n \ndefaultSettings\n];\n\n\n\n// set \nDo Not Track\n, i.e. \ndevice[dnt]\n parameter\n\n\nASIdentifierManager\n \n*\nasidManager\n \n=\n \n[\nASIdentifierManager\n \nsharedManager\n];\n\n\nsettings\n.\ntrackable\n \n=\n \n@(\nasidManager\n.\nadvertisingTrackingEnabled\n)\n;\n\n\n\n...", 
            "title": "Advanced Documentation"
        }, 
        {
            "location": "/ios/sdk-advanced/#spotx-ios-sdk-advanced-documentation", 
            "text": "Advanced documentation for SpotX iOS SDK", 
            "title": "SpotX iOS SDK Advanced Documentation"
        }, 
        {
            "location": "/ios/sdk-advanced/#spotx-initialize-parameters", 
            "text": "Parameter  Description      initializeWithApiKey  not currently used, for future use, so pass in  nil    category  an  IAB category  key that best fits the app    section  the best fit IAB section for the app pulled from a relevant  IAB category    domain  the domain of the app or company    url  the URL of the app in the  App Store     Example:  [ SpotX   initializeWithApiKey : nil \n                    category : @ IAB1 \n                     section : @ Fiction \n                      domain : @ www.mydomain.com \n                         url : @ https://itunes.apple.com/us/app/my_app/id123456789 ];   Read more about the OpenRTB  IAB Specification v2.0  if you re interested.", 
            "title": "SpotX Initialize Parameters"
        }, 
        {
            "location": "/ios/sdk-advanced/#spotxadsettings-configuration", 
            "text": "All parameters take can be  \"1\"  for ON or  \"0\"  for OFF; with the exception of  endCardDuration .     Parameter  Default Value  Description      useHTTPS  0  sets all ad requests to use SSL over HTTPS    useNativeBrowser  0  open click-though links in the native Safari browser    autoplay  1  play the ad without user interaction    skippable  0  allow the ad to skipped by the user    muted  0  request a muted ad if the volume is muted and muted is set    trackable  1  sets the  Do Not Track  in the ad request.  Read about how to set  dnt    endCardDuration  0  number of milliseconds to show an end card after an ad, if available    allowCalendar  0  allow a MRAID ad to set a calendar event    allowPhone  0  allow a MRAID ad to dial a phone number    allowSMS  0  allow a MRAID ad to write a text message    allowStorage  0  allow a MRAID ad to save a file (usually an image)", 
            "title": "SpotXAdSettings Configuration"
        }, 
        {
            "location": "/ios/sdk-advanced/#do-not-track", 
            "text": "To respect the user s preferences of  Do Not Track  you can set the  trackable  parameter to  1  to enable tracking, and  0  to NOT track.  You can set  Do Not Track  by:  @ import   AdSupport ;  ...  // init SpotX SDK  [ SpotX   initializeWithApiKey : nil \n                    category : @ IAB1 \n                     section : @ Fiction \n                      domain : @ www.mydomain.com \n                         url : @ https://itunes.apple.com/us/app/my_app/id123456789 ];  // create SpotXAdSettings object  id SpotXAdSettings   settings   =   [ SpotX   defaultSettings ];  // set  Do Not Track , i.e.  device[dnt]  parameter  ASIdentifierManager   * asidManager   =   [ ASIdentifierManager   sharedManager ];  settings . trackable   =   @( asidManager . advertisingTrackingEnabled ) ;  ...", 
            "title": "Do Not Track"
        }, 
        {
            "location": "/ios/release-notes/", 
            "text": "Release Notes For SpotX iOS SDK\n#\n\n\nLatest version: \n2.2.4\n released on \n2016-08-04\n\n\n2.2.4\n#\n\n\n\n\nUpdated to new \nmraid.js\n url.\n\n\nFixed issue with deal device targeting.\n\n\nRemoved \ndevice[didsha1]\n and \ndevice[dpidsha1]\n request parameters.\n\n\n\n\n2.2.3\n#\n\n\n\n\nRemoved \ndevice[ip]\n and \nmedia_transcoding\n from request parameters.\n\n\nAdded the \nX-Device-User-Agent\n header to all network requests.\n\n\nAdded \ndevice[ua]\n and \npreload=0\n to the request parameters.\n\n\n\n\n2.2.2\n#\n\n\n\n\nFixed memory issues.\n\n\nAdded public function \n[SpotXView -dispose]\n to explicitly release WebView resources.\n\n\n\n\n2.2.1\n#\n\n\n\n\nHTTPS fix for \nmraid.js\n.\n\n\nAdded bitcode support.\n\n\nTurn off module debug symbols because of Xcode 7.\n\n\n\n\n2.2.0\n#\n\n\n\n\nAdd support for \nend_slate\n parameter.\n\n\nAdded \ndevice[\"lang\"]\n to request parameters.\n\n\nIn-content playback starts when \n 50%\n of the player is in view and stops when \n 50%\n.\n\n\nUsing new v1 endpoint of \nmraid.js\n url.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/ios/release-notes/#release-notes-for-spotx-ios-sdk", 
            "text": "Latest version:  2.2.4  released on  2016-08-04", 
            "title": "Release Notes For SpotX iOS SDK"
        }, 
        {
            "location": "/ios/release-notes/#224", 
            "text": "Updated to new  mraid.js  url.  Fixed issue with deal device targeting.  Removed  device[didsha1]  and  device[dpidsha1]  request parameters.", 
            "title": "2.2.4"
        }, 
        {
            "location": "/ios/release-notes/#223", 
            "text": "Removed  device[ip]  and  media_transcoding  from request parameters.  Added the  X-Device-User-Agent  header to all network requests.  Added  device[ua]  and  preload=0  to the request parameters.", 
            "title": "2.2.3"
        }, 
        {
            "location": "/ios/release-notes/#222", 
            "text": "Fixed memory issues.  Added public function  [SpotXView -dispose]  to explicitly release WebView resources.", 
            "title": "2.2.2"
        }, 
        {
            "location": "/ios/release-notes/#221", 
            "text": "HTTPS fix for  mraid.js .  Added bitcode support.  Turn off module debug symbols because of Xcode 7.", 
            "title": "2.2.1"
        }, 
        {
            "location": "/ios/release-notes/#220", 
            "text": "Add support for  end_slate  parameter.  Added  device[\"lang\"]  to request parameters.  In-content playback starts when   50%  of the player is in view and stops when   50% .  Using new v1 endpoint of  mraid.js  url.", 
            "title": "2.2.0"
        }, 
        {
            "location": "/tvos/avplayer-sdk/", 
            "text": "SpotX SDK for AvPlayer\n#\n\n\nThe \nSpotX SDK for AVPlayer\n provides seamless integration with Apple\ns AVKit framework.\n\n\n\n\nAd Preloading\n\n\nFlexible Placement Options (pre-/post-/mid-roll, standalone)\n\n\nClient-side Ad Stitching\n\n\nAccess to underlying AVPlayerItem for advanced ad placements\n\n\n\n\nPrerequisites\n#\n\n\n\n\nXcode 7\n\n\nAdd SpotX.framework to your Xcode project\n\n\nA SpotX publisher account\n\n\nApply to become a SpotX Publisher\n\n\n\n\n\n\n\n\nRequesting an Ad\n#\n\n\nimport\n \nSpotX\n\n\n\nstatic\n \nlet\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nSpotX\n.\nadForChannel\n(\nCHANNEL_ID\n,\n \nparams\n:\nnil\n \ncompletion\n:{\n\n    \n(\nad\n:\nSPXAdController\n?,\n \nerror\n:\nNSError\n?)\n \n-\n \nvoid\n \nin\n\n\n      \nif\n \nlet\n \n_\n \n=\n \nad\n \n{\n\n        \n// do something with the ad -- show it now, or save for later\n\n      \n}\n\n      \nelse\n \nif\n \nlet\n \n_\n \n=\n \nerror\n \n{\n\n        \n// underlying transmission error\n\n      \n}\n\n      \nelse\n \n{\n\n        \n// no ad was available\n\n      \n}\n\n\n})\n\n\n\n\n\n\nPresenting an Ad in a TVML App\n#\n\n\n\n\nLoad the SpotX SDK. Don\nt worry, there are no additional dependencies.\n\n\nLoad up a SpotX Ad with your publisher channel ID.\n\n\nAdd any additional parameters you wish to collect (see below).\n\n\nPass a callback to receive the SpotXAdPlayer.\n\n\nAdd event listeners to the player, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling \nplayer.standalone().play()\n.\n\n\n\n\nimport\n \nSpotX\n\n\n\nvar\n \nplayer\n \n:\n \nAVQueuePlayer\n;\n\n\nvar\n \nad\n \n:\n \nSPXAdController\n;\n\n\n\n...\n\n\n\n// Inserts the ad at the front of the play queue\n\n\nad\n.\npreRoll\n(\nplayer\n)\n\n\n\n// Appends the ad to end end of the play queue\n\n\nad\n.\npostRoll\n(\nplayer\n)\n\n\n\n// Inserts the ad at the third position in the play queue\n\n\nad\n.\nmidRoll\n(\nplayer\n,\n \n2\n)\n\n\n\n// Client-side Ad Stitching: Plays an ad immediately using the given player.\n\n\nad\n.\nplay\n(\nplayer\n,\n \ncompletion\n:{\n\n    \n// callback invoked when the ad has finished\n\n    \n// and the original video content is restored\n\n\n})\n\n\n\n\n\n\nCustomizing the Ad Request\n#\n\n\nYou may specify additional parameters to refine your Ad request query with SpotX. The values for the following parameters should adhere to the \nOpenRTB API Specification 2.2\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp[name]\n\n\nApplication name (may be masked at publisher\u2019s request).\n\n\n\n\n\n\napp[domain]\n\n\nDomain of the application (e.g.,\u201cmygame.foo.com\u201d).\n\n\n\n\n\n\napp[cat]\n\n\nArray of IAB content categories for the overall application.\n\n\n\n\n\n\napp[ver]\n\n\nApplication version.\n\n\n\n\n\n\napp[privacypolicy]\n\n\nSpecifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.\n\n\n\n\n\n\napp[storeurl]\n\n\nFor QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.\n\n\n\n\n\n\napp[content][language]\n\n\nLanguage of the content. Use alpha-2/ISO 639-1 codes.\n\n\n\n\n\n\napp[content][contentrating]\n\n\nContent rating (e.g., MPAA)\n\n\n\n\n\n\ndevice[dnt]\n\n\nIf \u201c0\u201d, then do not track Is set to false, if \u201c1\u201d, then do no track is set to true in browser.\n\n\n\n\n\n\ndevice[geo][lon]\n\n\nLongitude from -180 to 180. West is negative. This should only be passed if known to be accurate.\n\n\n\n\n\n\ndevice[geo][lat]\n\n\nLatitude from -90 to 90. South is negative. This should only be passed if known to be accurate\n\n\n\n\n\n\n\n\nNOTE:\n Additional parameters (sometimes referred to as custom taxonomy) may be provided and will be stored along with your ad request.\n\n\nExample\n#\n\n\nlet\n \nparams\n \n=\n \n[\n\n  \napp[ver]\n:\n \n1.0\n,\n\n  \nmy_custom_param\n:\n \nmy_custom_value\n\n\n]\n\n\n\nSpotX\n \nadForChannel\n(\nCHANNEL_ID\n,\n \nparams\n:\nparams\n \ncompletion\n:{\n\n    \n(\nad\n:\nSPXAdController\n?,\n \nerror\n:\nNSError\n?)\n \n-\n \nvoid\n \nin\n\n      \n//...\n\n\n})", 
            "title": "AVPlayer"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#spotx-sdk-for-avplayer", 
            "text": "The  SpotX SDK for AVPlayer  provides seamless integration with Apple s AVKit framework.   Ad Preloading  Flexible Placement Options (pre-/post-/mid-roll, standalone)  Client-side Ad Stitching  Access to underlying AVPlayerItem for advanced ad placements", 
            "title": "SpotX SDK for AvPlayer"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#prerequisites", 
            "text": "Xcode 7  Add SpotX.framework to your Xcode project  A SpotX publisher account  Apply to become a SpotX Publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#requesting-an-ad", 
            "text": "import   SpotX  static   let   CHANNEL_ID   =   85394  SpotX . adForChannel ( CHANNEL_ID ,   params : nil   completion :{ \n     ( ad : SPXAdController ?,   error : NSError ?)   -   void   in \n\n       if   let   _   =   ad   { \n         // do something with the ad -- show it now, or save for later \n       } \n       else   if   let   _   =   error   { \n         // underlying transmission error \n       } \n       else   { \n         // no ad was available \n       }  })", 
            "title": "Requesting an Ad"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#presenting-an-ad-in-a-tvml-app", 
            "text": "Load the SpotX SDK. Don t worry, there are no additional dependencies.  Load up a SpotX Ad with your publisher channel ID.  Add any additional parameters you wish to collect (see below).  Pass a callback to receive the SpotXAdPlayer.  Add event listeners to the player, if you are interested in Ad lifecycle events.  Present the Ad by calling  player.standalone().play() .   import   SpotX  var   player   :   AVQueuePlayer ;  var   ad   :   SPXAdController ;  ...  // Inserts the ad at the front of the play queue  ad . preRoll ( player )  // Appends the ad to end end of the play queue  ad . postRoll ( player )  // Inserts the ad at the third position in the play queue  ad . midRoll ( player ,   2 )  // Client-side Ad Stitching: Plays an ad immediately using the given player.  ad . play ( player ,   completion :{ \n     // callback invoked when the ad has finished \n     // and the original video content is restored  })", 
            "title": "Presenting an Ad in a TVML App"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#customizing-the-ad-request", 
            "text": "You may specify additional parameters to refine your Ad request query with SpotX. The values for the following parameters should adhere to the  OpenRTB API Specification 2.2 .     Parameter  Description      app[name]  Application name (may be masked at publisher\u2019s request).    app[domain]  Domain of the application (e.g.,\u201cmygame.foo.com\u201d).    app[cat]  Array of IAB content categories for the overall application.    app[ver]  Application version.    app[privacypolicy]  Specifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.    app[storeurl]  For QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.    app[content][language]  Language of the content. Use alpha-2/ISO 639-1 codes.    app[content][contentrating]  Content rating (e.g., MPAA)    device[dnt]  If \u201c0\u201d, then do not track Is set to false, if \u201c1\u201d, then do no track is set to true in browser.    device[geo][lon]  Longitude from -180 to 180. West is negative. This should only be passed if known to be accurate.    device[geo][lat]  Latitude from -90 to 90. South is negative. This should only be passed if known to be accurate     NOTE:  Additional parameters (sometimes referred to as custom taxonomy) may be provided and will be stored along with your ad request.", 
            "title": "Customizing the Ad Request"
        }, 
        {
            "location": "/tvos/avplayer-sdk/#example", 
            "text": "let   params   =   [ \n   app[ver] :   1.0 , \n   my_custom_param :   my_custom_value  ]  SpotX   adForChannel ( CHANNEL_ID ,   params : params   completion :{ \n     ( ad : SPXAdController ?,   error : NSError ?)   -   void   in \n       //...  })", 
            "title": "Example"
        }, 
        {
            "location": "/tvos/tvml-sdk/", 
            "text": "SpotX tvOS Integration\n#\n\n\nMonetize your tvOS app with SpotX!\n\n\nPrerequisites\n#\n\n\n\n\nXcode 7.1.1\n\n\nSpotX publisher account\n\n\nApply to become a SpotX Publisher\n\n\n\n\n\n\n\n\nPresenting an Ad in a Native App\n#\n\n\n\n\nInclude SpotXAd.swift in your project. Don\nt worry, there are no additional dependencies.\n\n\nInstantiate a SpotXAd instance with your publisher channel ID and any additional parameters you wish to collect.\n\n\nAttach an implementation of the SpotXAdDelegate protocol, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling SpotXAd.show().\n\n\n\n\nstatic\n \nlet\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nfunc\n \nplayAd\n()\n \n{\n\n    \nself\n.\nad\n \n=\n \nSpotXAd\n(\nchannelId\n:\n \nCHANNEL_ID\n,\n \ndelegate\n:\n \nself\n)\n\n    \nself\n.\nad\n?.\nshow\n(\nself\n,\n \nanimated\n:\n \ntrue\n)\n\n\n}\n\n\n\n\n\n\nPresenting an Ad in a TVML App\n#\n\n\n\n\nLoad the SpotX SDK. Don\nt worry, there are no additional dependencies.\n\n\nLoad up a SpotX Ad with your publisher channel ID.\n\n\nAdd any additional parameters you wish to collect.\n\n\nPass a callback to receive the SpotXAdPlayer.\n\n\nAdd event listeners to the player, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling \nplayer.standalone().play()\n.\n\n\n\n\n// NOTE: Subject to change after prerelease development\n\n\nvar\n \nSPOTX_SDK\n \n=\n \nhttps://m.spotx.ninja/tvos/v2/sdk.js\n;\n\n\nvar\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nApp\n.\nonLaunch\n \n=\n \nfunction\n(\noptions\n)\n \n{\n\n  \nevaluateScripts\n([\nSPOTX_SDK\n],\n \nfunction\n()\n \n{\n\n    \nloadAd\n();\n\n  \n});\n\n\n};\n\n\n\nfunction\n \nloadAd\n()\n \n{\n\n  \nvar\n \nparams\n \n=\n \n{\n\n    \ncustom_1\n:\n \ncustom-param\n\n  \n};\n\n\n  \nSpotX\n.\nload\n(\nCHANNEL_ID\n,\n \nparams\n,\n \nfunction\n \n(\nerror\n,\n \nplayer\n)\n \n{\n\n      \nvar\n \nAD_EVENTS\n \n=\n \n[\nAdStarted\n,\n \nAdStopped\n,\n \nAdError\n];\n\n      \nAD_EVENTS\n.\nforEach\n(\nfunction\n(\nevent\n)\n \n{\n\n        \nplayer\n.\naddEventListener\n(\nevent\n,\n \nfunction\n()\n \n{\n\n          \nconsole\n.\nlog\n(\nReceived event: \n \n+\n \nevent\n);\n\n        \n});\n\n      \n});\n\n\n      \nplayer\n.\nstandalone\n().\nplay\n();\n\n  \n});\n\n\n}", 
            "title": "TVML"
        }, 
        {
            "location": "/tvos/tvml-sdk/#spotx-tvos-integration", 
            "text": "Monetize your tvOS app with SpotX!", 
            "title": "SpotX tvOS Integration"
        }, 
        {
            "location": "/tvos/tvml-sdk/#prerequisites", 
            "text": "Xcode 7.1.1  SpotX publisher account  Apply to become a SpotX Publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/tvos/tvml-sdk/#presenting-an-ad-in-a-native-app", 
            "text": "Include SpotXAd.swift in your project. Don t worry, there are no additional dependencies.  Instantiate a SpotXAd instance with your publisher channel ID and any additional parameters you wish to collect.  Attach an implementation of the SpotXAdDelegate protocol, if you are interested in Ad lifecycle events.  Present the Ad by calling SpotXAd.show().   static   let   CHANNEL_ID   =   85394  func   playAd ()   { \n     self . ad   =   SpotXAd ( channelId :   CHANNEL_ID ,   delegate :   self ) \n     self . ad ?. show ( self ,   animated :   true )  }", 
            "title": "Presenting an Ad in a Native App"
        }, 
        {
            "location": "/tvos/tvml-sdk/#presenting-an-ad-in-a-tvml-app", 
            "text": "Load the SpotX SDK. Don t worry, there are no additional dependencies.  Load up a SpotX Ad with your publisher channel ID.  Add any additional parameters you wish to collect.  Pass a callback to receive the SpotXAdPlayer.  Add event listeners to the player, if you are interested in Ad lifecycle events.  Present the Ad by calling  player.standalone().play() .   // NOTE: Subject to change after prerelease development  var   SPOTX_SDK   =   https://m.spotx.ninja/tvos/v2/sdk.js ;  var   CHANNEL_ID   =   85394  App . onLaunch   =   function ( options )   { \n   evaluateScripts ([ SPOTX_SDK ],   function ()   { \n     loadAd (); \n   });  };  function   loadAd ()   { \n   var   params   =   { \n     custom_1 :   custom-param \n   }; \n\n   SpotX . load ( CHANNEL_ID ,   params ,   function   ( error ,   player )   { \n       var   AD_EVENTS   =   [ AdStarted ,   AdStopped ,   AdError ]; \n       AD_EVENTS . forEach ( function ( event )   { \n         player . addEventListener ( event ,   function ()   { \n           console . log ( Received event:    +   event ); \n         }); \n       }); \n\n       player . standalone (). play (); \n   });  }", 
            "title": "Presenting an Ad in a TVML App"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/", 
            "text": "MoPub Adapter for the Android SpotX SDK\n#\n\n\nWho Can Use the Adapter\n#\n\n\nTo use the adapter, you need to be a SpotX publisher and use the MoPub SDK for Android.\nIf you are not already a SpotX publisher, \napply to become a spotx publisher\n.\n\n\nWhat the Adapter Does\n#\n\n\nThe adapter allows the \nSpotX SDK\n and the \nMoPub SDK\n to communicate with each other seamlessly.\n\n\nHow to Install the Adapter\n#\n\n\nFollow the documentation for installing the \nSpotX Android SDK\n.\n\n\nConfiguration\n#\n\n\nUse the custom data field to pass configuration parameters to the SpotX adapter. Get more information on MoPub custom events at the  \nTwitter Ad Networks Docs\n. The custom data is a \nJSON\n object with the following mandatory keys:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchannel_id\n\n\nYour SpotXchange  publisher channel ID\n\n\n\n\n\n\nplaystore_url\n\n\nURL to your app in the Google Play store\n\n\n\n\n\n\napp_domain\n\n\nInternet domain for your app\ns website\n\n\n\n\n\n\niab_category\n\n\nIAB category used to classify your app\n\n\n\n\n\n\n\n\nGet step-by-step instructions on how to specify parameters through the \nMoPub Dev Website\n.\n\n\nFor more information on the SpotX Android SDK check out the \nDocumentation\n.\n\n\nInterstitial\n#\n\n\nYou will need to specify the Custom Event Class for interstitial videos:\n\n\ncom\n.\nspotxchange\n.\nv3\n.\nadapters\n.\nmopub\n.\nSpotXInterstitial\n\n\n\n\n\n\nYour Custom Event Class Data field will look something like the following:\n\n\n{\n\n  \nchannel_id\n:\n12345\n,\n\n  \napp_domain\n:\ncom.mycompany.myapp\n\n\n}\n\n\n\n\n\n\nRewarded Video\n#\n\n\nYou will need to specify the Custom Event Class for rewarded videos:\n\n\ncom.spotxchange.v3.adapters.mopub.SpotXRewardedVideo\n\n\n\n\n\nYour Custom Event Class Data field will look something like the following:\n\n\n{\n\n  \nchannel_id\n:\n12345\n,\n\n  \napp_domain\n:\ncom.mycompany.myapp\n,\n\n  \niab_category\n:\nIAB1\n,\n\n  \niab_section\n:\nUNKNOWN\n,\n\n  \nappstore_url\n:\nwww.appstore.com\n,\n\n  \napp_url\n:\nhttps://itunes.apple.com/us/app/spotxchange_advertisments/id123456789\n,\n\n  \ncustom_param\n:\ncustom_value\n\n\n}\n\n\n\n\n\n\nUsage\n#\n\n\nYou can look at the \nSpotX Demo App\n on how to integrate the MoPub adapter.", 
            "title": "MoPub Android"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#mopub-adapter-for-the-android-spotx-sdk", 
            "text": "", 
            "title": "MoPub Adapter for the Android SpotX SDK"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#who-can-use-the-adapter", 
            "text": "To use the adapter, you need to be a SpotX publisher and use the MoPub SDK for Android.\nIf you are not already a SpotX publisher,  apply to become a spotx publisher .", 
            "title": "Who Can Use the Adapter"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#what-the-adapter-does", 
            "text": "The adapter allows the  SpotX SDK  and the  MoPub SDK  to communicate with each other seamlessly.", 
            "title": "What the Adapter Does"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#how-to-install-the-adapter", 
            "text": "Follow the documentation for installing the  SpotX Android SDK .", 
            "title": "How to Install the Adapter"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#configuration", 
            "text": "Use the custom data field to pass configuration parameters to the SpotX adapter. Get more information on MoPub custom events at the   Twitter Ad Networks Docs . The custom data is a  JSON  object with the following mandatory keys:     Parameter  Description      channel_id  Your SpotXchange  publisher channel ID    playstore_url  URL to your app in the Google Play store    app_domain  Internet domain for your app s website    iab_category  IAB category used to classify your app     Get step-by-step instructions on how to specify parameters through the  MoPub Dev Website .  For more information on the SpotX Android SDK check out the  Documentation .", 
            "title": "Configuration"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#interstitial", 
            "text": "You will need to specify the Custom Event Class for interstitial videos:  com . spotxchange . v3 . adapters . mopub . SpotXInterstitial   Your Custom Event Class Data field will look something like the following:  { \n   channel_id : 12345 , \n   app_domain : com.mycompany.myapp  }", 
            "title": "Interstitial"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#rewarded-video", 
            "text": "You will need to specify the Custom Event Class for rewarded videos:  com.spotxchange.v3.adapters.mopub.SpotXRewardedVideo  Your Custom Event Class Data field will look something like the following:  { \n   channel_id : 12345 , \n   app_domain : com.mycompany.myapp , \n   iab_category : IAB1 , \n   iab_section : UNKNOWN , \n   appstore_url : www.appstore.com , \n   app_url : https://itunes.apple.com/us/app/spotxchange_advertisments/id123456789 , \n   custom_param : custom_value  }", 
            "title": "Rewarded Video"
        }, 
        {
            "location": "/adapters/mopub/android-adapter/#usage", 
            "text": "You can look at the  SpotX Demo App  on how to integrate the MoPub adapter.", 
            "title": "Usage"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/", 
            "text": "Who Can Use the Plugin\n#\n\n\nTo use the plugin, you need to be a SpotX publisher and have an active account with MoPub.\n\n\nBecome a SpotX Publisher\n#\n\n\nIf you are not already a SpotX publisher, click \nhere\n to apply.\n\n\nCreate a MoPub Account\n#\n\n\nIf you don\nt yet have a MoPub account, click \nhere\n to sign up.\n\n\nWhat the Plugin Does\n#\n\n\nThe plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.\n\n\nHow to Install the Plugin\n#\n\n\nThere are two ways to install this plugin:\n\n\nCocoaPods (preferred)\n#\n\n\nSimply add the following to your Podfile.\n\n\npod\n \nSpotX-MoPub-Plugin\n\n\n\n\n\n\nSource Code\n#\n\n\nDownload the source code and import it in your Xcode project. The project is available from our \nGithub repository\n.\n\n\nConfiguration\n#\n\n\nUse the custom data field to pass configuration parameters to the SpotX plugin. Additional details are available in the documentation for \nMoPub Custom Events\n. The custom data is a \nJSON\n object with the following required keys:\n\n\n\n\nchannel_id - Your SpotX publisher channel ID\n\n\niab_category - IAB category used to classify your app\n\n\niab_section - IAB category subsection used to classify your app\n\n\nappstore_url - URL to your app in the Apple App store.\n\n\napp_domain - Internet domain for your app\ns website\n\n\n\n\nIn addition to the required properties, you may also include any of the following optional keys (*default value in parenthesis):\n\n\n\n\nuse_https - (\nfalse\n) All network requests will be done over HTTPS\n\n\nuse_native_browser - (\ntrue\n) If false, ad interactions will be displayed in an internal browser rather than the system default\n\n\nallow_calendar - (\nfalse\n) Allow ads to create calendar events\n\n\nallow_phone - (\nfalse\n) Allow ads to initiate a phone call\n\n\nallow_sms - (\nfalse\n) Allow ads to author an SMS message \n\n\nallow_storage - (\nfalse\n) Allow ads to store images\n\n\nskippable - (\nfalse\n) Request ads that are skippable\n\n\ntrackable - (\ntrue\n) Disable ad tracking\n\n\nparams - (\nundefined\n) A hash of key-value strings that are passed-through in the ad request\n\n\n\n\nGet step-by-step instructions on how to specify parameters through the MoPub UI in MoPub\na \nAd Network Documentation\n.\n\n\nRewarded Video\n#\n\n\nGetting Started with Rewarded Video\n#\n\n\nBefore integrating the SpotX custom event class library for MoPub rewarded video,\nplease review the \nRewarded Video for iOS Documentation\n.\n\n\nFollow the instructions in the \nBasic Integration\n section of the documentation.  If you have already installed the SpotX-MoPub-Plugin,\nyou will have completed step one of the integration process.\n\n\nRewarded Video - Mediation Settings\n#\n\n\nMediation settings may be used to pass additional configuration parameters to the SpotX network during the rewarded video initialization\ncall.\n\n\nThe SpotX Rewarded Video interface currently only supports \ninstance mediation settings\n. The current SpotX mediation settings class\ncontains the following parameter:\n\n\n\n\nchannel_id - Your SpotX publisher channel ID\n\n\n\n\nThe following code snippet demonstrates how to use the SpotX mediation settings object.\n\n\n-(\nvoid\n)\n \nloadRewardedVideo\n \n{\n\n    \n// Initialize rewarded video before loading any ads.\n\n    \n[[\nMoPub\n \nsharedInstance\n]\n \ninitializeRewardedVideoWithGlobalMediationSettings\n:\nnil\n \ndelegate\n:\nself\n];\n\n\n    \n// Create the SpotX Mediation Settings object\n\n    \nSpotXInstanceMediationSettings\n \n*\n \nsettings\n \n=\n \n[[\nSpotXInstanceMediationSettings\n \nalloc\n]\n \ninit\n];\n\n\n    \n// Set the SpotX channel ID\n\n    \nsettings\n.\nchannel_id\n \n=\n \n@\n[SpotX publisher channel ID]\n;\n\n\n    \n// Fetch the rewarded video ad.\n\n    \n[\nMPRewardedVideo\n \nloadRewardedVideoAdWithAdUnitID\n:@\n\u201c\n[\nPlaceholder\n \nAd\n \nUnit\n \nID\n]\n\u201c\n \nwithMediationSettings\n:\nsettings\n];\n\n\n}\n\n\n\n\n\n\nFor a more detailed example of using the SpotX-MoPub-Plugin, checkout our \nSpotX-MoPub Integration Testing App for iOS\n on GitHub.", 
            "title": "MoPub iOS"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#who-can-use-the-plugin", 
            "text": "To use the plugin, you need to be a SpotX publisher and have an active account with MoPub.", 
            "title": "Who Can Use the Plugin"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#become-a-spotx-publisher", 
            "text": "If you are not already a SpotX publisher, click  here  to apply.", 
            "title": "Become a SpotX Publisher"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#create-a-mopub-account", 
            "text": "If you don t yet have a MoPub account, click  here  to sign up.", 
            "title": "Create a MoPub Account"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#what-the-plugin-does", 
            "text": "The plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.", 
            "title": "What the Plugin Does"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#how-to-install-the-plugin", 
            "text": "There are two ways to install this plugin:", 
            "title": "How to Install the Plugin"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#cocoapods-preferred", 
            "text": "Simply add the following to your Podfile.  pod   SpotX-MoPub-Plugin", 
            "title": "CocoaPods (preferred)"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#source-code", 
            "text": "Download the source code and import it in your Xcode project. The project is available from our  Github repository .", 
            "title": "Source Code"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#configuration", 
            "text": "Use the custom data field to pass configuration parameters to the SpotX plugin. Additional details are available in the documentation for  MoPub Custom Events . The custom data is a  JSON  object with the following required keys:   channel_id - Your SpotX publisher channel ID  iab_category - IAB category used to classify your app  iab_section - IAB category subsection used to classify your app  appstore_url - URL to your app in the Apple App store.  app_domain - Internet domain for your app s website   In addition to the required properties, you may also include any of the following optional keys (*default value in parenthesis):   use_https - ( false ) All network requests will be done over HTTPS  use_native_browser - ( true ) If false, ad interactions will be displayed in an internal browser rather than the system default  allow_calendar - ( false ) Allow ads to create calendar events  allow_phone - ( false ) Allow ads to initiate a phone call  allow_sms - ( false ) Allow ads to author an SMS message   allow_storage - ( false ) Allow ads to store images  skippable - ( false ) Request ads that are skippable  trackable - ( true ) Disable ad tracking  params - ( undefined ) A hash of key-value strings that are passed-through in the ad request   Get step-by-step instructions on how to specify parameters through the MoPub UI in MoPub a  Ad Network Documentation .", 
            "title": "Configuration"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#rewarded-video", 
            "text": "", 
            "title": "Rewarded Video"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#getting-started-with-rewarded-video", 
            "text": "Before integrating the SpotX custom event class library for MoPub rewarded video,\nplease review the  Rewarded Video for iOS Documentation .  Follow the instructions in the  Basic Integration  section of the documentation.  If you have already installed the SpotX-MoPub-Plugin,\nyou will have completed step one of the integration process.", 
            "title": "Getting Started with Rewarded Video"
        }, 
        {
            "location": "/adapters/mopub/ios-adapter/#rewarded-video-mediation-settings", 
            "text": "Mediation settings may be used to pass additional configuration parameters to the SpotX network during the rewarded video initialization\ncall.  The SpotX Rewarded Video interface currently only supports  instance mediation settings . The current SpotX mediation settings class\ncontains the following parameter:   channel_id - Your SpotX publisher channel ID   The following code snippet demonstrates how to use the SpotX mediation settings object.  -( void )   loadRewardedVideo   { \n     // Initialize rewarded video before loading any ads. \n     [[ MoPub   sharedInstance ]   initializeRewardedVideoWithGlobalMediationSettings : nil   delegate : self ]; \n\n     // Create the SpotX Mediation Settings object \n     SpotXInstanceMediationSettings   *   settings   =   [[ SpotXInstanceMediationSettings   alloc ]   init ]; \n\n     // Set the SpotX channel ID \n     settings . channel_id   =   @ [SpotX publisher channel ID] ; \n\n     // Fetch the rewarded video ad. \n     [ MPRewardedVideo   loadRewardedVideoAdWithAdUnitID :@ \u201c [ Placeholder   Ad   Unit   ID ] \u201c   withMediationSettings : settings ];  }   For a more detailed example of using the SpotX-MoPub-Plugin, checkout our  SpotX-MoPub Integration Testing App for iOS  on GitHub.", 
            "title": "Rewarded Video - Mediation Settings"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/", 
            "text": "Brightcove Adapter for the Android SpotX SDK\n#\n\n\nWho Can Use the Adapter\n#\n\n\nTo use the adapter, you need to be a SpotX publisher and use the Brightcove Player SDK for Android.\nIf you are not already a SpotX publisher, \napply to become a spotx publisher\n.\n\n\nWhat the adapter Does\n#\n\n\nThe adapter allows the \nSpotX Android SDK\n and the Brightcove Player SDK to work together so you can monetize your player\ns content.\n\n\nHow to Install the Adapter\n#\n\n\nFollow the documentation for installing the \nSpotX Android SDK\n.\n\n\nSet Up\n#\n\n\nTo set up and use the SpotX adapter you need to initialize the SpotX SDK and construct the adapter with your publisher channel ID within your activity.\n\n\n// init SpotX\n\n\nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n\n\n// construct adapter\n\n\nString\n \nchannelId\n \n=\n \n85394\n;\n\n\nEventEmitter\n \nemitter\n \n=\n \nbrightcoveVideoView\n.\ngetEventEmitter\n()\n\n\nSpotXBrightcoveAdapter\n \nspotxAdapter\n \n=\n \nnew\n \nSpotXBrightcoveAdapter\n(\nemitter\n,\n \nthis\n,\n \nchannelId\n);\n\n\n\n\n\n\nYou can set the number of ads that the adapter will play be setting the \nadCount\n property to value greater than 1.\n\n\nspotxAdapter\n.\nadCount\n \n=\n \n3\n;\n \n// default: 1 ad\n\n\n\n\n\n\nYou can also specify the duration of ads in seconds you would like to play that will override the set count by setting \nadDuration\n.\n\n\nspotxAdapter\n.\nadDuration\n \n=\n \n90\n;\n \n// default: 0 seconds\n\n\n\n\n\n\nIf you want to customize the timeout length for loading an ad you can set the \nadLoadTimeoutSeconds\n property.\n\n\nspotxAdapter\n.\nadLoadTimeoutSeconds\n \n=\n \n5\n;\n \n// default: 10 seconds\n\n\n\n\n\n\nConfigure\n#\n\n\nIf you wish to set additional settings such as \nuseHTTPS\n you can access the \nSpotXAdBuilder\n with the function \ngetAdBuilder()\n.\n\n\nspotxAdapter\n.\ngetAdBuilder\n().\nuseHTTPS\n \n=\n \ntrue\n;\n\n\n\n\n\n\nTo learn more about the additional settings and parameters you can pass, check out the \nSpotX SDK Android Documentation\n and the \nAdvanced Android Documentation\n.\n\n\nUsage\n#\n\n\nYou can look at the \nSpotX Demo App\n on how to integrate the  Brightcove adapter, or you can follow \nBrightcove\ns sample app\n on how to configure and use the adapter with the Brightcove SDK.", 
            "title": "Brightcove Android"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#brightcove-adapter-for-the-android-spotx-sdk", 
            "text": "", 
            "title": "Brightcove Adapter for the Android SpotX SDK"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#who-can-use-the-adapter", 
            "text": "To use the adapter, you need to be a SpotX publisher and use the Brightcove Player SDK for Android.\nIf you are not already a SpotX publisher,  apply to become a spotx publisher .", 
            "title": "Who Can Use the Adapter"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#what-the-adapter-does", 
            "text": "The adapter allows the  SpotX Android SDK  and the Brightcove Player SDK to work together so you can monetize your player s content.", 
            "title": "What the adapter Does"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#how-to-install-the-adapter", 
            "text": "Follow the documentation for installing the  SpotX Android SDK .", 
            "title": "How to Install the Adapter"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#set-up", 
            "text": "To set up and use the SpotX adapter you need to initialize the SpotX SDK and construct the adapter with your publisher channel ID within your activity.  // init SpotX  SpotX . initialize ( getApplicationContext ());  // construct adapter  String   channelId   =   85394 ;  EventEmitter   emitter   =   brightcoveVideoView . getEventEmitter ()  SpotXBrightcoveAdapter   spotxAdapter   =   new   SpotXBrightcoveAdapter ( emitter ,   this ,   channelId );   You can set the number of ads that the adapter will play be setting the  adCount  property to value greater than 1.  spotxAdapter . adCount   =   3 ;   // default: 1 ad   You can also specify the duration of ads in seconds you would like to play that will override the set count by setting  adDuration .  spotxAdapter . adDuration   =   90 ;   // default: 0 seconds   If you want to customize the timeout length for loading an ad you can set the  adLoadTimeoutSeconds  property.  spotxAdapter . adLoadTimeoutSeconds   =   5 ;   // default: 10 seconds", 
            "title": "Set Up"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#configure", 
            "text": "If you wish to set additional settings such as  useHTTPS  you can access the  SpotXAdBuilder  with the function  getAdBuilder() .  spotxAdapter . getAdBuilder (). useHTTPS   =   true ;   To learn more about the additional settings and parameters you can pass, check out the  SpotX SDK Android Documentation  and the  Advanced Android Documentation .", 
            "title": "Configure"
        }, 
        {
            "location": "/adapters/brightcove/android-adapter/#usage", 
            "text": "You can look at the  SpotX Demo App  on how to integrate the  Brightcove adapter, or you can follow  Brightcove s sample app  on how to configure and use the adapter with the Brightcove SDK.", 
            "title": "Usage"
        }, 
        {
            "location": "/iab-categories/", 
            "text": "IAB Categories\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nCategory\n\n\n\n\n\n\n\n\n\n\nIAB1\n\n\nArts \n Entertainment\n\n\n\n\n\n\nIAB1-1\n\n\nBooks \n Literature\n\n\n\n\n\n\nIAB1-2\n\n\nCelebrity Fan/Gossip\n\n\n\n\n\n\nIAB1-3\n\n\nFine Art\n\n\n\n\n\n\nIAB1-4\n\n\nHumor\n\n\n\n\n\n\nIAB1-5\n\n\nMovies\n\n\n\n\n\n\nIAB1-6\n\n\nMusic\n\n\n\n\n\n\nIAB1-7\n\n\nTelevision\n\n\n\n\n\n\nIAB2\n\n\nAutomotive\n\n\n\n\n\n\nIAB2-1\n\n\nAuto Parts\n\n\n\n\n\n\nIAB2-2\n\n\nAuto Repair\n\n\n\n\n\n\nIAB2-3\n\n\nBuying/Selling Cars\n\n\n\n\n\n\nIAB2-4\n\n\nCar Culture\n\n\n\n\n\n\nIAB2-5\n\n\nCertified Pre-Owned\n\n\n\n\n\n\nIAB2-6\n\n\nConvertible\n\n\n\n\n\n\nIAB2-7\n\n\nCoupe\n\n\n\n\n\n\nIAB2-8\n\n\nCrossover\n\n\n\n\n\n\nIAB2-9\n\n\nDiesel\n\n\n\n\n\n\nIAB2-10\n\n\nElectric Vehicle\n\n\n\n\n\n\nIAB2-11\n\n\nHatchback\n\n\n\n\n\n\nIAB2-12\n\n\nHybrid\n\n\n\n\n\n\nIAB2-13\n\n\nLuxury\n\n\n\n\n\n\nIAB2-14\n\n\nMiniVan\n\n\n\n\n\n\nIAB2-15\n\n\nMororcycles\n\n\n\n\n\n\nIAB2-16\n\n\nOff-Road Vehicles\n\n\n\n\n\n\nIAB2-17\n\n\nPerformance Vehicles\n\n\n\n\n\n\nIAB2-18\n\n\nPickup\n\n\n\n\n\n\nIAB2-19\n\n\nRoad-Side Assistance\n\n\n\n\n\n\nIAB2-20\n\n\nSedan\n\n\n\n\n\n\nIAB2-21\n\n\nTrucks \n Accessories\n\n\n\n\n\n\nIAB2-22\n\n\nVintage Cars\n\n\n\n\n\n\nIAB2-23\n\n\nWagon\n\n\n\n\n\n\nIAB3\n\n\nBusiness\n\n\n\n\n\n\nIAB3-1\n\n\nAdvertising\n\n\n\n\n\n\nIAB3-2\n\n\nAgriculture\n\n\n\n\n\n\nIAB3-3\n\n\nBiotech/Biomedical\n\n\n\n\n\n\nIAB3-4\n\n\nBusiness Software\n\n\n\n\n\n\nIAB3-5\n\n\nConstruction\n\n\n\n\n\n\nIAB3-6\n\n\nForestry\n\n\n\n\n\n\nIAB3-7\n\n\nGovernment\n\n\n\n\n\n\nIAB3-8\n\n\nGreen Solutions\n\n\n\n\n\n\nIAB3-9\n\n\nHuman Resources\n\n\n\n\n\n\nIAB3-10\n\n\nLogistics\n\n\n\n\n\n\nIAB3-11\n\n\nMarketing\n\n\n\n\n\n\nIAB3-12\n\n\nMetals\n\n\n\n\n\n\nIAB4\n\n\nCareers\n\n\n\n\n\n\nIAB4-1\n\n\nCareer Planning\n\n\n\n\n\n\nIAB4-2\n\n\nCollege\n\n\n\n\n\n\nIAB4-3\n\n\nFinancial Aid\n\n\n\n\n\n\nIAB4-4\n\n\nJob Fairs\n\n\n\n\n\n\nIAB4-5\n\n\nJob Search\n\n\n\n\n\n\nIAB4-6\n\n\nResume Writing/Advice\n\n\n\n\n\n\nIAB4-7\n\n\nNursing\n\n\n\n\n\n\nIAB4-8\n\n\nScholarships\n\n\n\n\n\n\nIAB4-9\n\n\nTelecommuting\n\n\n\n\n\n\nIAB4-10\n\n\nU.S. Military\n\n\n\n\n\n\nIAB4-11\n\n\nCareer Advice\n\n\n\n\n\n\nIAB5\n\n\nEducation\n\n\n\n\n\n\nIAB5-1\n\n\n7-12 Education\n\n\n\n\n\n\nIAB5-2\n\n\nAdult Education\n\n\n\n\n\n\nIAB5-3\n\n\nArt History\n\n\n\n\n\n\nIAB5-4\n\n\nColledge Administration\n\n\n\n\n\n\nIAB5-5\n\n\nCollege Life\n\n\n\n\n\n\nIAB5-6\n\n\nDistance Learning\n\n\n\n\n\n\nIAB5-7\n\n\nEnglish as a 2nd Language\n\n\n\n\n\n\nIAB5-8\n\n\nLanguage Learning\n\n\n\n\n\n\nIAB5-9\n\n\nGraduate School\n\n\n\n\n\n\nIAB5-10\n\n\nHomeschooling\n\n\n\n\n\n\nIAB5-11\n\n\nHomework/Study Tips\n\n\n\n\n\n\nIAB5-12\n\n\nK-6 Educators\n\n\n\n\n\n\nIAB5-13\n\n\nPrivate School\n\n\n\n\n\n\nIAB5-14\n\n\nSpecial Education\n\n\n\n\n\n\nIAB5-15\n\n\nStudying Business\n\n\n\n\n\n\nIAB6\n\n\nFamily \n Parenting\n\n\n\n\n\n\nIAB6-1\n\n\nAdoption\n\n\n\n\n\n\nIAB6-2\n\n\nBabies \n Toddlers\n\n\n\n\n\n\nIAB6-3\n\n\nDaycare/Pre School\n\n\n\n\n\n\nIAB6-4\n\n\nFamily Internet\n\n\n\n\n\n\nIAB6-5\n\n\nParenting - K-6 Kids\n\n\n\n\n\n\nIAB6-6\n\n\nParenting teens\n\n\n\n\n\n\nIAB6-7\n\n\nPregnancy\n\n\n\n\n\n\nIAB6-8\n\n\nSpecial Needs Kids\n\n\n\n\n\n\nIAB6-9\n\n\nEldercare\n\n\n\n\n\n\nIAB7\n\n\nHealth \n Fitness\n\n\n\n\n\n\nIAB7-1\n\n\nExercise\n\n\n\n\n\n\nIAB7-2\n\n\nA.D.D.\n\n\n\n\n\n\nIAB7-3\n\n\nAIDS/HIV\n\n\n\n\n\n\nIAB7-4\n\n\nAllergies\n\n\n\n\n\n\nIAB7-5\n\n\nAlternative Medicine\n\n\n\n\n\n\nIAB7-6\n\n\nArthritis\n\n\n\n\n\n\nIAB7-7\n\n\nAsthma\n\n\n\n\n\n\nIAB7-8\n\n\nAutism/PDD\n\n\n\n\n\n\nIAB7-9\n\n\nBipolar Disorder\n\n\n\n\n\n\nIAB7-10\n\n\nBrain Tumor\n\n\n\n\n\n\nIAB7-11\n\n\nCancer\n\n\n\n\n\n\nIAB7-12\n\n\nCholesterol\n\n\n\n\n\n\nIAB7-13\n\n\nChronic Fatigue Syndrome\n\n\n\n\n\n\nIAB7-14\n\n\nChronic Pain\n\n\n\n\n\n\nIAB7-15\n\n\nCold \n Flu\n\n\n\n\n\n\nIAB7-16\n\n\nDeafness\n\n\n\n\n\n\nIAB7-17\n\n\nDental Care\n\n\n\n\n\n\nIAB7-18\n\n\nDepression\n\n\n\n\n\n\nIAB7-19\n\n\nDermatology\n\n\n\n\n\n\nIAB7-20\n\n\nDiabetes\n\n\n\n\n\n\nIAB7-21\n\n\nEpilepsy\n\n\n\n\n\n\nIAB7-22\n\n\nGERD/Acid Reflux\n\n\n\n\n\n\nIAB7-23\n\n\nHeadaches/Migraines\n\n\n\n\n\n\nIAB7-24\n\n\nHeart Disease\n\n\n\n\n\n\nIAB7-25\n\n\nHerbs for Health\n\n\n\n\n\n\nIAB7-26\n\n\nHolistic Healing\n\n\n\n\n\n\nIAB7-27\n\n\nIBS/Crohn\ns Disease\n\n\n\n\n\n\nIAB7-28\n\n\nIncest/Abuse Support\n\n\n\n\n\n\nIAB7-29\n\n\nIncontinence\n\n\n\n\n\n\nIAB7-30\n\n\nInfertility\n\n\n\n\n\n\nIAB7-31\n\n\nMen\ns Health\n\n\n\n\n\n\nIAB7-32\n\n\nNutrition\n\n\n\n\n\n\nIAB7-33\n\n\nOrthopedics\n\n\n\n\n\n\nIAB7-34\n\n\nPanic/Anxiety Disorders\n\n\n\n\n\n\nIAB7-35\n\n\nPediatrics\n\n\n\n\n\n\nIAB7-36\n\n\nPhysical Therapy\n\n\n\n\n\n\nIAB7-37\n\n\nPsychology/Psychiatry\n\n\n\n\n\n\nIAB7-38\n\n\nSenor Health\n\n\n\n\n\n\nIAB7-39\n\n\nSexuality\n\n\n\n\n\n\nIAB7-40\n\n\nSleep Disorders\n\n\n\n\n\n\nIAB7-41\n\n\nSmoking Cessation\n\n\n\n\n\n\nIAB7-42\n\n\nSubstance Abuse\n\n\n\n\n\n\nIAB7-43\n\n\nThyroid Disease\n\n\n\n\n\n\nIAB7-44\n\n\nWeight Loss\n\n\n\n\n\n\nIAB7-45\n\n\nWomen\ns Health\n\n\n\n\n\n\nIAB8\n\n\nFood \n Drink\n\n\n\n\n\n\nIAB8-1\n\n\nAmerican Cuisine\n\n\n\n\n\n\nIAB8-2\n\n\nBarbecues \n Grilling\n\n\n\n\n\n\nIAB8-3\n\n\nCajun/Creole\n\n\n\n\n\n\nIAB8-4\n\n\nChinese Cuisine\n\n\n\n\n\n\nIAB8-5\n\n\nCocktails/Beer\n\n\n\n\n\n\nIAB8-6\n\n\nCoffee/Tea\n\n\n\n\n\n\nIAB8-7\n\n\nCuisine-Specific\n\n\n\n\n\n\nIAB8-8\n\n\nDesserts \n Baking\n\n\n\n\n\n\nIAB8-9\n\n\nDining Out\n\n\n\n\n\n\nIAB8-10\n\n\nFood Allergies\n\n\n\n\n\n\nIAB8-11\n\n\nFrench Cuisine\n\n\n\n\n\n\nIAB8-12\n\n\nHealth/Lowfat Cooking\n\n\n\n\n\n\nIAB8-13\n\n\nItalian Cuisine\n\n\n\n\n\n\nIAB8-14\n\n\nJapanese Cuisine\n\n\n\n\n\n\nIAB8-15\n\n\nMexican Cuisine\n\n\n\n\n\n\nIAB8-16\n\n\nVegan\n\n\n\n\n\n\nIAB8-17\n\n\nVegetarian\n\n\n\n\n\n\nIAB8-18\n\n\nWine\n\n\n\n\n\n\nIAB9\n\n\nHobbies \n Interests\n\n\n\n\n\n\nIAB9-1\n\n\nArt/Technology\n\n\n\n\n\n\nIAB9-2\n\n\nArts \n Crafts\n\n\n\n\n\n\nIAB9-3\n\n\nBeadwork\n\n\n\n\n\n\nIAB9-4\n\n\nBirdwatching\n\n\n\n\n\n\nIAB9-5\n\n\nBoard Games/Puzzles\n\n\n\n\n\n\nIAB9-6\n\n\nCandle \n Soap Making\n\n\n\n\n\n\nIAB9-7\n\n\nCard Games\n\n\n\n\n\n\nIAB9-8\n\n\nChess\n\n\n\n\n\n\nIAB9-9\n\n\nCigars\n\n\n\n\n\n\nIAB9-10\n\n\nCollecting\n\n\n\n\n\n\nIAB9-11\n\n\nComic Books\n\n\n\n\n\n\nIAB9-12\n\n\nDrawing/Sketching\n\n\n\n\n\n\nIAB9-13\n\n\nFreelance Writing\n\n\n\n\n\n\nIAB9-14\n\n\nGenealogy\n\n\n\n\n\n\nIAB9-15\n\n\nGetting Published\n\n\n\n\n\n\nIAB9-16\n\n\nGuitar\n\n\n\n\n\n\nIAB9-17\n\n\nHome Recording\n\n\n\n\n\n\nIAB9-18\n\n\nInvestors \n Patents\n\n\n\n\n\n\nIAB9-19\n\n\nJewelry Making\n\n\n\n\n\n\nIAB9-20\n\n\nMagic \n Illusion\n\n\n\n\n\n\nIAB9-21\n\n\nNeedlework\n\n\n\n\n\n\nIAB9-22\n\n\nPainting\n\n\n\n\n\n\nIAB9-23\n\n\nPhotography\n\n\n\n\n\n\nIAB9-24\n\n\nRadio\n\n\n\n\n\n\nIAB9-25\n\n\nRoleplaying Games\n\n\n\n\n\n\nIAB9-26\n\n\nSci-Fi \n Fantasy\n\n\n\n\n\n\nIAB9-27\n\n\nScrapbooking\n\n\n\n\n\n\nIAB9-28\n\n\nScreenwriting\n\n\n\n\n\n\nIAB9-29\n\n\nStamps \n Coins\n\n\n\n\n\n\nIAB9-30\n\n\nVideo \n Computer Games\n\n\n\n\n\n\nIAB9-31\n\n\nWoodworking\n\n\n\n\n\n\nIAB10\n\n\nHome \n Garden\n\n\n\n\n\n\nIAB10-1\n\n\nAppliances\n\n\n\n\n\n\nIAB10-2\n\n\nEntertaining\n\n\n\n\n\n\nIAB10-3\n\n\nEnvironmental Safety\n\n\n\n\n\n\nIAB10-4\n\n\nGardening\n\n\n\n\n\n\nIAB10-5\n\n\nHome Repair\n\n\n\n\n\n\nIAB10-6\n\n\nHome Theater\n\n\n\n\n\n\nIAB10-7\n\n\nInterior Decorating\n\n\n\n\n\n\nIAB10-8\n\n\nLandscaping\n\n\n\n\n\n\nIAB10-9\n\n\nRemodeling \n Construction\n\n\n\n\n\n\nIAB11\n\n\nLaw, Gov\nt \n Politics\n\n\n\n\n\n\nIAB11-1\n\n\nImmigration\n\n\n\n\n\n\nIAB11-2\n\n\nLegal Issues\n\n\n\n\n\n\nIAB11-3\n\n\nU.S. Government Resources\n\n\n\n\n\n\nIAB11-4\n\n\nPolitics\n\n\n\n\n\n\nIAB11-5\n\n\nCommentary\n\n\n\n\n\n\nIAB12\n\n\nNews\n\n\n\n\n\n\nIAB12-1\n\n\nInternational News\n\n\n\n\n\n\nIAB12-2\n\n\nNational News\n\n\n\n\n\n\nIAB12-3\n\n\nLocal News\n\n\n\n\n\n\nIAB13\n\n\nPersonal Finance\n\n\n\n\n\n\nIAB13-1\n\n\nBeginning Investing\n\n\n\n\n\n\nIAB13-2\n\n\nCredit/Debt \n Loans\n\n\n\n\n\n\nIAB13-3\n\n\nFinancial News\n\n\n\n\n\n\nIAB13-4\n\n\nFinancial Planning\n\n\n\n\n\n\nIAB13-5\n\n\nHedge Fund\n\n\n\n\n\n\nIAB13-6\n\n\nInsurance\n\n\n\n\n\n\nIAB13-7\n\n\nInvesting\n\n\n\n\n\n\nIAB13-8\n\n\nMutual Funds\n\n\n\n\n\n\nIAB13-9\n\n\nOptions\n\n\n\n\n\n\nIAB13-10\n\n\nRetirement Planning\n\n\n\n\n\n\nIAB13-11\n\n\nStocks\n\n\n\n\n\n\nIAB13-12\n\n\nTax Planning\n\n\n\n\n\n\nIAB14\n\n\nSociety\n\n\n\n\n\n\nIAB14-1\n\n\nDating\n\n\n\n\n\n\nIAB14-2\n\n\nDivorce Support\n\n\n\n\n\n\nIAB14-3\n\n\nGay Life\n\n\n\n\n\n\nIAB14-4\n\n\nMarriage\n\n\n\n\n\n\nIAB14-5\n\n\nSenior Living\n\n\n\n\n\n\nIAB14-6\n\n\nTeens\n\n\n\n\n\n\nIAB14-7\n\n\nWeddings\n\n\n\n\n\n\nIAB14-8\n\n\nEthnic Specific\n\n\n\n\n\n\nIAB15\n\n\nScience\n\n\n\n\n\n\nIAB15-1\n\n\nAstrology\n\n\n\n\n\n\nIAB15-2\n\n\nBiology\n\n\n\n\n\n\nIAB15-3\n\n\nChemistry\n\n\n\n\n\n\nIAB15-4\n\n\nGeology\n\n\n\n\n\n\nIAB15-5\n\n\nParanormal Phenomena\n\n\n\n\n\n\nIAB15-6\n\n\nPhysics\n\n\n\n\n\n\nIAB15-7\n\n\nSpace/Astronomy\n\n\n\n\n\n\nIAB15-8\n\n\nGeography\n\n\n\n\n\n\nIAB15-9\n\n\nBotany\n\n\n\n\n\n\nIAB15-10\n\n\nWeather\n\n\n\n\n\n\nIAB16\n\n\nPets\n\n\n\n\n\n\nIAB16-1\n\n\nAquariums\n\n\n\n\n\n\nIAB16-2\n\n\nBirds\n\n\n\n\n\n\nIAB16-3\n\n\nCats\n\n\n\n\n\n\nIAB16-4\n\n\nDogs\n\n\n\n\n\n\nIAB16-5\n\n\nLarge Animals\n\n\n\n\n\n\nIAB16-6\n\n\nReptiles\n\n\n\n\n\n\nIAB16-7\n\n\nVeterinary Medicine\n\n\n\n\n\n\nIAB17\n\n\nSports\n\n\n\n\n\n\nIAB17-1\n\n\nAuto Racing\n\n\n\n\n\n\nIAB17-2\n\n\nBaseball\n\n\n\n\n\n\nIAB17-3\n\n\nBicycling\n\n\n\n\n\n\nIAB17-4\n\n\nBodybuilding\n\n\n\n\n\n\nIAB17-5\n\n\nBoxing\n\n\n\n\n\n\nIAB17-6\n\n\nCanoeing/Kayaking\n\n\n\n\n\n\nIAB17-7\n\n\nCheerleading\n\n\n\n\n\n\nIAB17-8\n\n\nClimbing\n\n\n\n\n\n\nIAB17-9\n\n\nCricket\n\n\n\n\n\n\nIAB17-10\n\n\nFigure Skating\n\n\n\n\n\n\nIAB17-11\n\n\nFly Fishing\n\n\n\n\n\n\nIAB17-12\n\n\nFootball\n\n\n\n\n\n\nIAB17-13\n\n\nFreshwater Fishing\n\n\n\n\n\n\nIAB17-14\n\n\nGame \n Fish\n\n\n\n\n\n\nIAB17-15\n\n\nGolf\n\n\n\n\n\n\nIAB17-16\n\n\nHorse Racing\n\n\n\n\n\n\nIAB17-17\n\n\nHorses\n\n\n\n\n\n\nIAB17-18\n\n\nHunting/Shooting\n\n\n\n\n\n\nIAB17-19\n\n\nInline Skating\n\n\n\n\n\n\nIAB17-20\n\n\nMartial Arts\n\n\n\n\n\n\nIAB17-21\n\n\nMountain Biking\n\n\n\n\n\n\nIAB17-22\n\n\nNASCAR Racing\n\n\n\n\n\n\nIAB17-23\n\n\nOlympics\n\n\n\n\n\n\nIAB17-24\n\n\nPaintball\n\n\n\n\n\n\nIAB17-25\n\n\nPower \n Motorcycles\n\n\n\n\n\n\nIAB17-26\n\n\nPro Basketball\n\n\n\n\n\n\nIAB17-27\n\n\nPro Ice Hockey\n\n\n\n\n\n\nIAB17-28\n\n\nRodeo\n\n\n\n\n\n\nIAB17-29\n\n\nRugby\n\n\n\n\n\n\nIAB17-30\n\n\nRunning/Jogging\n\n\n\n\n\n\nIAB17-31\n\n\nSailing\n\n\n\n\n\n\nIAB17-32\n\n\nSaltwater Fishing\n\n\n\n\n\n\nIAB17-33\n\n\nScuba Diving\n\n\n\n\n\n\nIAB17-34\n\n\nSkateboarding\n\n\n\n\n\n\nIAB17-35\n\n\nSkiing\n\n\n\n\n\n\nIAB17-36\n\n\nSnowboarding\n\n\n\n\n\n\nIAB17-37\n\n\nSurfing/Bodyboarding\n\n\n\n\n\n\nIAB17-38\n\n\nSwimming\n\n\n\n\n\n\nIAB17-39\n\n\nTable Tennis/Ping-Pong\n\n\n\n\n\n\nIAB17-40\n\n\nTennis\n\n\n\n\n\n\nIAB17-41\n\n\nVolleyball\n\n\n\n\n\n\nIAB17-42\n\n\nWalking\n\n\n\n\n\n\nIAB17-43\n\n\nWaterski/Wakeboard\n\n\n\n\n\n\nIAB17-44\n\n\nWorld Soccer\n\n\n\n\n\n\nIAB18\n\n\nStyle \n Fashion\n\n\n\n\n\n\nIAB18-1\n\n\nBeauty\n\n\n\n\n\n\nIAB18-2\n\n\nBody Art\n\n\n\n\n\n\nIAB18-3\n\n\nFashion\n\n\n\n\n\n\nIAB18-4\n\n\nJewelry\n\n\n\n\n\n\nIAB18-5\n\n\nClothing\n\n\n\n\n\n\nIAB18-6\n\n\nAccessories\n\n\n\n\n\n\nIAB19\n\n\nTechnology \n Computing\n\n\n\n\n\n\nIAB19-1\n\n\n3-D Graphics\n\n\n\n\n\n\nIAB19-2\n\n\nAnimation\n\n\n\n\n\n\nIAB19-3\n\n\nAntivirus Software\n\n\n\n\n\n\nIAB19-4\n\n\nC/C++\n\n\n\n\n\n\nIAB19-5\n\n\nCameras \n Camcorders\n\n\n\n\n\n\nIAB19-6\n\n\nCell Phones\n\n\n\n\n\n\nIAB19-7\n\n\nComputer Certification\n\n\n\n\n\n\nIAB19-8\n\n\nComputer Networking\n\n\n\n\n\n\nIAB19-9\n\n\nComputer Peripherals\n\n\n\n\n\n\nIAB19-10\n\n\nComputer Reviews\n\n\n\n\n\n\nIAB19-11\n\n\nData Centers\n\n\n\n\n\n\nIAB19-12\n\n\nDatabases\n\n\n\n\n\n\nIAB19-13\n\n\nDesktop Publishing\n\n\n\n\n\n\nIAB19-14\n\n\nDesktop Video\n\n\n\n\n\n\nIAB19-15\n\n\nEmail\n\n\n\n\n\n\nIAB19-16\n\n\nGraphics Software\n\n\n\n\n\n\nIAB19-17\n\n\nHome Video/DVD\n\n\n\n\n\n\nIAB19-18\n\n\nInternet Technology\n\n\n\n\n\n\nIAB19-19\n\n\nJava\n\n\n\n\n\n\nIAB19-20\n\n\nJavaScript\n\n\n\n\n\n\nIAB19-21\n\n\nMac Support\n\n\n\n\n\n\nIAB19-22\n\n\nMP3/MIDI\n\n\n\n\n\n\nIAB19-23\n\n\nNet Conferencing\n\n\n\n\n\n\nIAB19-24\n\n\nNet for Beginners\n\n\n\n\n\n\nIAB19-25\n\n\nNetwork Security\n\n\n\n\n\n\nIAB19-26\n\n\nPalmtops/PDAs\n\n\n\n\n\n\nIAB19-27\n\n\nPC Support\n\n\n\n\n\n\nIAB19-28\n\n\nPortable\n\n\n\n\n\n\nIAB19-29\n\n\nEntertainment\n\n\n\n\n\n\nIAB19-30\n\n\nShareware/Freeware\n\n\n\n\n\n\nIAB19-31\n\n\nUnix\n\n\n\n\n\n\nIAB19-32\n\n\nVisual Basic\n\n\n\n\n\n\nIAB19-33\n\n\nWeb Clip Art\n\n\n\n\n\n\nIAB19-34\n\n\nWeb Design/HTML\n\n\n\n\n\n\nIAB19-35\n\n\nWeb Search\n\n\n\n\n\n\nIAB19-36\n\n\nWindows\n\n\n\n\n\n\nIAB20\n\n\nTravel\n\n\n\n\n\n\nIAB20-1\n\n\nAdventure Travel\n\n\n\n\n\n\nIAB20-2\n\n\nAfrica\n\n\n\n\n\n\nIAB20-3\n\n\nAir Travel\n\n\n\n\n\n\nIAB20-4\n\n\nAustralia \n New Zealand\n\n\n\n\n\n\nIAB20-5\n\n\nBed \n Breakfasts\n\n\n\n\n\n\nIAB20-6\n\n\nBudget Travel\n\n\n\n\n\n\nIAB20-7\n\n\nBusiness Travel\n\n\n\n\n\n\nIAB20-8\n\n\nBy US Locale\n\n\n\n\n\n\nIAB20-9\n\n\nCamping\n\n\n\n\n\n\nIAB20-10\n\n\nCanada\n\n\n\n\n\n\nIAB20-11\n\n\nCaribbean\n\n\n\n\n\n\nIAB20-12\n\n\nCruises\n\n\n\n\n\n\nIAB20-13\n\n\nEastern Europe\n\n\n\n\n\n\nIAB20-14\n\n\nEurope\n\n\n\n\n\n\nIAB20-15\n\n\nFrance\n\n\n\n\n\n\nIAB20-16\n\n\nGreece\n\n\n\n\n\n\nIAB20-17\n\n\nHoneymoons/Getaways\n\n\n\n\n\n\nIAB20-18\n\n\nHotels\n\n\n\n\n\n\nIAB20-19\n\n\nItaly\n\n\n\n\n\n\nIAB20-20\n\n\nJapan\n\n\n\n\n\n\nIAB20-21\n\n\nMexico \n Central America\n\n\n\n\n\n\nIAB20-22\n\n\nNational Parks\n\n\n\n\n\n\nIAB20-23\n\n\nSouth America\n\n\n\n\n\n\nIAB20-24\n\n\nSpas\n\n\n\n\n\n\nIAB20-25\n\n\nTheme Parks\n\n\n\n\n\n\nIAB20-26\n\n\nTraveling with Kids\n\n\n\n\n\n\nIAB20-27\n\n\nUnited Kingdom\n\n\n\n\n\n\nIAB21\n\n\nReal Estate\n\n\n\n\n\n\nIAB21-1\n\n\nApartments\n\n\n\n\n\n\nIAB21-2\n\n\nArchitects\n\n\n\n\n\n\nIAB21-3\n\n\nBuying/Selling Homes\n\n\n\n\n\n\nIAB22\n\n\nShopping\n\n\n\n\n\n\nIAB22-1\n\n\nContests \n Freebies\n\n\n\n\n\n\nIAB22-2\n\n\nCouponing\n\n\n\n\n\n\nIAB22-3\n\n\nComparison\n\n\n\n\n\n\nIAB22-4\n\n\nEngines\n\n\n\n\n\n\nIAB23\n\n\nReligion \n Spirituality\n\n\n\n\n\n\nIAB23-1\n\n\nAlternative Religions\n\n\n\n\n\n\nIAB23-2\n\n\nAtheism/Agnosticism\n\n\n\n\n\n\nIAB23-3\n\n\nBuddhism\n\n\n\n\n\n\nIAB23-4\n\n\nCatholicism\n\n\n\n\n\n\nIAB23-5\n\n\nChristianity\n\n\n\n\n\n\nIAB23-6\n\n\nHinduism\n\n\n\n\n\n\nIAB23-7\n\n\nIslam\n\n\n\n\n\n\nIAB23-8\n\n\nJudaism\n\n\n\n\n\n\nIAB23-9\n\n\nLatter-Day Saints\n\n\n\n\n\n\nIAB23-10\n\n\nPagan/Wiccan\n\n\n\n\n\n\nIAB24\n\n\nUncategorized\n\n\n\n\n\n\nIAB25\n\n\nNon-Standard Content\n\n\n\n\n\n\nIAB25-1\n\n\nUnmoderated UGC\n\n\n\n\n\n\nIAB25-2\n\n\nExtreme Graphic/Explicit Violence\n\n\n\n\n\n\nIAB25-3\n\n\nPornography\n\n\n\n\n\n\nIAB25-4\n\n\nProfane Content\n\n\n\n\n\n\nIAB25-5\n\n\nHate Content\n\n\n\n\n\n\nIAB25-6\n\n\nUnder Construction\n\n\n\n\n\n\nIAB25-7\n\n\nIncentivized\n\n\n\n\n\n\nIAB26\n\n\nIllegal Content\n\n\n\n\n\n\nIAB26-1\n\n\nIllegal Content\n\n\n\n\n\n\nIAB26-2\n\n\nWarez\n\n\n\n\n\n\nIAB26-3\n\n\nSpyware/Malware\n\n\n\n\n\n\nIAB26-4\n\n\nCopyrightInfringement", 
            "title": "IAB Categories"
        }, 
        {
            "location": "/iab-categories/#iab-categories", 
            "text": "Parameter  Category      IAB1  Arts   Entertainment    IAB1-1  Books   Literature    IAB1-2  Celebrity Fan/Gossip    IAB1-3  Fine Art    IAB1-4  Humor    IAB1-5  Movies    IAB1-6  Music    IAB1-7  Television    IAB2  Automotive    IAB2-1  Auto Parts    IAB2-2  Auto Repair    IAB2-3  Buying/Selling Cars    IAB2-4  Car Culture    IAB2-5  Certified Pre-Owned    IAB2-6  Convertible    IAB2-7  Coupe    IAB2-8  Crossover    IAB2-9  Diesel    IAB2-10  Electric Vehicle    IAB2-11  Hatchback    IAB2-12  Hybrid    IAB2-13  Luxury    IAB2-14  MiniVan    IAB2-15  Mororcycles    IAB2-16  Off-Road Vehicles    IAB2-17  Performance Vehicles    IAB2-18  Pickup    IAB2-19  Road-Side Assistance    IAB2-20  Sedan    IAB2-21  Trucks   Accessories    IAB2-22  Vintage Cars    IAB2-23  Wagon    IAB3  Business    IAB3-1  Advertising    IAB3-2  Agriculture    IAB3-3  Biotech/Biomedical    IAB3-4  Business Software    IAB3-5  Construction    IAB3-6  Forestry    IAB3-7  Government    IAB3-8  Green Solutions    IAB3-9  Human Resources    IAB3-10  Logistics    IAB3-11  Marketing    IAB3-12  Metals    IAB4  Careers    IAB4-1  Career Planning    IAB4-2  College    IAB4-3  Financial Aid    IAB4-4  Job Fairs    IAB4-5  Job Search    IAB4-6  Resume Writing/Advice    IAB4-7  Nursing    IAB4-8  Scholarships    IAB4-9  Telecommuting    IAB4-10  U.S. Military    IAB4-11  Career Advice    IAB5  Education    IAB5-1  7-12 Education    IAB5-2  Adult Education    IAB5-3  Art History    IAB5-4  Colledge Administration    IAB5-5  College Life    IAB5-6  Distance Learning    IAB5-7  English as a 2nd Language    IAB5-8  Language Learning    IAB5-9  Graduate School    IAB5-10  Homeschooling    IAB5-11  Homework/Study Tips    IAB5-12  K-6 Educators    IAB5-13  Private School    IAB5-14  Special Education    IAB5-15  Studying Business    IAB6  Family   Parenting    IAB6-1  Adoption    IAB6-2  Babies   Toddlers    IAB6-3  Daycare/Pre School    IAB6-4  Family Internet    IAB6-5  Parenting - K-6 Kids    IAB6-6  Parenting teens    IAB6-7  Pregnancy    IAB6-8  Special Needs Kids    IAB6-9  Eldercare    IAB7  Health   Fitness    IAB7-1  Exercise    IAB7-2  A.D.D.    IAB7-3  AIDS/HIV    IAB7-4  Allergies    IAB7-5  Alternative Medicine    IAB7-6  Arthritis    IAB7-7  Asthma    IAB7-8  Autism/PDD    IAB7-9  Bipolar Disorder    IAB7-10  Brain Tumor    IAB7-11  Cancer    IAB7-12  Cholesterol    IAB7-13  Chronic Fatigue Syndrome    IAB7-14  Chronic Pain    IAB7-15  Cold   Flu    IAB7-16  Deafness    IAB7-17  Dental Care    IAB7-18  Depression    IAB7-19  Dermatology    IAB7-20  Diabetes    IAB7-21  Epilepsy    IAB7-22  GERD/Acid Reflux    IAB7-23  Headaches/Migraines    IAB7-24  Heart Disease    IAB7-25  Herbs for Health    IAB7-26  Holistic Healing    IAB7-27  IBS/Crohn s Disease    IAB7-28  Incest/Abuse Support    IAB7-29  Incontinence    IAB7-30  Infertility    IAB7-31  Men s Health    IAB7-32  Nutrition    IAB7-33  Orthopedics    IAB7-34  Panic/Anxiety Disorders    IAB7-35  Pediatrics    IAB7-36  Physical Therapy    IAB7-37  Psychology/Psychiatry    IAB7-38  Senor Health    IAB7-39  Sexuality    IAB7-40  Sleep Disorders    IAB7-41  Smoking Cessation    IAB7-42  Substance Abuse    IAB7-43  Thyroid Disease    IAB7-44  Weight Loss    IAB7-45  Women s Health    IAB8  Food   Drink    IAB8-1  American Cuisine    IAB8-2  Barbecues   Grilling    IAB8-3  Cajun/Creole    IAB8-4  Chinese Cuisine    IAB8-5  Cocktails/Beer    IAB8-6  Coffee/Tea    IAB8-7  Cuisine-Specific    IAB8-8  Desserts   Baking    IAB8-9  Dining Out    IAB8-10  Food Allergies    IAB8-11  French Cuisine    IAB8-12  Health/Lowfat Cooking    IAB8-13  Italian Cuisine    IAB8-14  Japanese Cuisine    IAB8-15  Mexican Cuisine    IAB8-16  Vegan    IAB8-17  Vegetarian    IAB8-18  Wine    IAB9  Hobbies   Interests    IAB9-1  Art/Technology    IAB9-2  Arts   Crafts    IAB9-3  Beadwork    IAB9-4  Birdwatching    IAB9-5  Board Games/Puzzles    IAB9-6  Candle   Soap Making    IAB9-7  Card Games    IAB9-8  Chess    IAB9-9  Cigars    IAB9-10  Collecting    IAB9-11  Comic Books    IAB9-12  Drawing/Sketching    IAB9-13  Freelance Writing    IAB9-14  Genealogy    IAB9-15  Getting Published    IAB9-16  Guitar    IAB9-17  Home Recording    IAB9-18  Investors   Patents    IAB9-19  Jewelry Making    IAB9-20  Magic   Illusion    IAB9-21  Needlework    IAB9-22  Painting    IAB9-23  Photography    IAB9-24  Radio    IAB9-25  Roleplaying Games    IAB9-26  Sci-Fi   Fantasy    IAB9-27  Scrapbooking    IAB9-28  Screenwriting    IAB9-29  Stamps   Coins    IAB9-30  Video   Computer Games    IAB9-31  Woodworking    IAB10  Home   Garden    IAB10-1  Appliances    IAB10-2  Entertaining    IAB10-3  Environmental Safety    IAB10-4  Gardening    IAB10-5  Home Repair    IAB10-6  Home Theater    IAB10-7  Interior Decorating    IAB10-8  Landscaping    IAB10-9  Remodeling   Construction    IAB11  Law, Gov t   Politics    IAB11-1  Immigration    IAB11-2  Legal Issues    IAB11-3  U.S. Government Resources    IAB11-4  Politics    IAB11-5  Commentary    IAB12  News    IAB12-1  International News    IAB12-2  National News    IAB12-3  Local News    IAB13  Personal Finance    IAB13-1  Beginning Investing    IAB13-2  Credit/Debt   Loans    IAB13-3  Financial News    IAB13-4  Financial Planning    IAB13-5  Hedge Fund    IAB13-6  Insurance    IAB13-7  Investing    IAB13-8  Mutual Funds    IAB13-9  Options    IAB13-10  Retirement Planning    IAB13-11  Stocks    IAB13-12  Tax Planning    IAB14  Society    IAB14-1  Dating    IAB14-2  Divorce Support    IAB14-3  Gay Life    IAB14-4  Marriage    IAB14-5  Senior Living    IAB14-6  Teens    IAB14-7  Weddings    IAB14-8  Ethnic Specific    IAB15  Science    IAB15-1  Astrology    IAB15-2  Biology    IAB15-3  Chemistry    IAB15-4  Geology    IAB15-5  Paranormal Phenomena    IAB15-6  Physics    IAB15-7  Space/Astronomy    IAB15-8  Geography    IAB15-9  Botany    IAB15-10  Weather    IAB16  Pets    IAB16-1  Aquariums    IAB16-2  Birds    IAB16-3  Cats    IAB16-4  Dogs    IAB16-5  Large Animals    IAB16-6  Reptiles    IAB16-7  Veterinary Medicine    IAB17  Sports    IAB17-1  Auto Racing    IAB17-2  Baseball    IAB17-3  Bicycling    IAB17-4  Bodybuilding    IAB17-5  Boxing    IAB17-6  Canoeing/Kayaking    IAB17-7  Cheerleading    IAB17-8  Climbing    IAB17-9  Cricket    IAB17-10  Figure Skating    IAB17-11  Fly Fishing    IAB17-12  Football    IAB17-13  Freshwater Fishing    IAB17-14  Game   Fish    IAB17-15  Golf    IAB17-16  Horse Racing    IAB17-17  Horses    IAB17-18  Hunting/Shooting    IAB17-19  Inline Skating    IAB17-20  Martial Arts    IAB17-21  Mountain Biking    IAB17-22  NASCAR Racing    IAB17-23  Olympics    IAB17-24  Paintball    IAB17-25  Power   Motorcycles    IAB17-26  Pro Basketball    IAB17-27  Pro Ice Hockey    IAB17-28  Rodeo    IAB17-29  Rugby    IAB17-30  Running/Jogging    IAB17-31  Sailing    IAB17-32  Saltwater Fishing    IAB17-33  Scuba Diving    IAB17-34  Skateboarding    IAB17-35  Skiing    IAB17-36  Snowboarding    IAB17-37  Surfing/Bodyboarding    IAB17-38  Swimming    IAB17-39  Table Tennis/Ping-Pong    IAB17-40  Tennis    IAB17-41  Volleyball    IAB17-42  Walking    IAB17-43  Waterski/Wakeboard    IAB17-44  World Soccer    IAB18  Style   Fashion    IAB18-1  Beauty    IAB18-2  Body Art    IAB18-3  Fashion    IAB18-4  Jewelry    IAB18-5  Clothing    IAB18-6  Accessories    IAB19  Technology   Computing    IAB19-1  3-D Graphics    IAB19-2  Animation    IAB19-3  Antivirus Software    IAB19-4  C/C++    IAB19-5  Cameras   Camcorders    IAB19-6  Cell Phones    IAB19-7  Computer Certification    IAB19-8  Computer Networking    IAB19-9  Computer Peripherals    IAB19-10  Computer Reviews    IAB19-11  Data Centers    IAB19-12  Databases    IAB19-13  Desktop Publishing    IAB19-14  Desktop Video    IAB19-15  Email    IAB19-16  Graphics Software    IAB19-17  Home Video/DVD    IAB19-18  Internet Technology    IAB19-19  Java    IAB19-20  JavaScript    IAB19-21  Mac Support    IAB19-22  MP3/MIDI    IAB19-23  Net Conferencing    IAB19-24  Net for Beginners    IAB19-25  Network Security    IAB19-26  Palmtops/PDAs    IAB19-27  PC Support    IAB19-28  Portable    IAB19-29  Entertainment    IAB19-30  Shareware/Freeware    IAB19-31  Unix    IAB19-32  Visual Basic    IAB19-33  Web Clip Art    IAB19-34  Web Design/HTML    IAB19-35  Web Search    IAB19-36  Windows    IAB20  Travel    IAB20-1  Adventure Travel    IAB20-2  Africa    IAB20-3  Air Travel    IAB20-4  Australia   New Zealand    IAB20-5  Bed   Breakfasts    IAB20-6  Budget Travel    IAB20-7  Business Travel    IAB20-8  By US Locale    IAB20-9  Camping    IAB20-10  Canada    IAB20-11  Caribbean    IAB20-12  Cruises    IAB20-13  Eastern Europe    IAB20-14  Europe    IAB20-15  France    IAB20-16  Greece    IAB20-17  Honeymoons/Getaways    IAB20-18  Hotels    IAB20-19  Italy    IAB20-20  Japan    IAB20-21  Mexico   Central America    IAB20-22  National Parks    IAB20-23  South America    IAB20-24  Spas    IAB20-25  Theme Parks    IAB20-26  Traveling with Kids    IAB20-27  United Kingdom    IAB21  Real Estate    IAB21-1  Apartments    IAB21-2  Architects    IAB21-3  Buying/Selling Homes    IAB22  Shopping    IAB22-1  Contests   Freebies    IAB22-2  Couponing    IAB22-3  Comparison    IAB22-4  Engines    IAB23  Religion   Spirituality    IAB23-1  Alternative Religions    IAB23-2  Atheism/Agnosticism    IAB23-3  Buddhism    IAB23-4  Catholicism    IAB23-5  Christianity    IAB23-6  Hinduism    IAB23-7  Islam    IAB23-8  Judaism    IAB23-9  Latter-Day Saints    IAB23-10  Pagan/Wiccan    IAB24  Uncategorized    IAB25  Non-Standard Content    IAB25-1  Unmoderated UGC    IAB25-2  Extreme Graphic/Explicit Violence    IAB25-3  Pornography    IAB25-4  Profane Content    IAB25-5  Hate Content    IAB25-6  Under Construction    IAB25-7  Incentivized    IAB26  Illegal Content    IAB26-1  Illegal Content    IAB26-2  Warez    IAB26-3  Spyware/Malware    IAB26-4  CopyrightInfringement", 
            "title": "IAB Categories"
        }
    ]
}