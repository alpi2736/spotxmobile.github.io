{
    "docs": [
        {
            "location": "/", 
            "text": "SpotX Mobile Documentation\n#\n\n\nThe links on the left will provide you with our documentation for our mobile and connected devices SDKs.\nWe Currently have SDKs/Adapters for:\n\n\n\n\nAndroid\n\n\niOS\n\n\nAppleTV\n\n\nMoPub SDK\n\n\n\n\n\n\n 2016 SpotXchange", 
            "title": "Home"
        }, 
        {
            "location": "/#spotx-mobile-documentation", 
            "text": "The links on the left will provide you with our documentation for our mobile and connected devices SDKs.\nWe Currently have SDKs/Adapters for:   Android  iOS  AppleTV  MoPub SDK     2016 SpotXchange", 
            "title": "SpotX Mobile Documentation"
        }, 
        {
            "location": "/android-sdk/", 
            "text": "SpotX Android SDK Quick Start\n#\n\n\nExample code and tutorial for displaying SpotX video ads in Android apps.\n\n\nPrerequisites\n#\n\n\n\n\nMinimum API: 14 (Ice Cream Sandwich)\n\n\nTarget API: 24 (N)\n\n\nSpotX publisher account\n\n\nApply to become a publisher\n\n\n\n\nBefore You Begin\n#\n\n\n\n\nYou\nll need to be a SpotX publisher if you aren\nt already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the \nSpotX\nPublisher Tools\n.\n\n\nFrom the Publisher Tools you will be able to create \nchannels\n that define the\nentry point to connecting with advertisers.  You\nll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.\n\n\nInclude the SpotX SDK as a dependency in your project in one of the following\nways:\n\n\nDownload the jar which contains the SpotX SDK Library, then - using Eclipse\n  or Android Studio - declare that jar as a file dependency.\n\n\nUsing Gradle, include the following in your build.gradle file:\n\n\n\n\n  repositories {\n      jcenter()\n  }\n  dependencies {\n        compile \ncom.spotxchange:spotx-sdk-android:3.+\n\n  }\n\n\n\n\n\nYou can always download the latest version of the SpotX SDK from \nBintray\n;\nthe latest version of the SpotX Demo App is also available on our \nGitHub Repository\n.\n\n\nSetup Your Android Manifest\n#\n\n\nThe \nAndroidManifest.xml\n file defines permissions for your applications.\n1. Add \nINTERNET\n permission to the manifest file for your app, if it\ns not\nalready present.\n\n\n!--- REQUIRED FOR INTERNET ACCESS ---\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\n\n\n\nOptionally, you may also include any or all the following permissions, which will\nimprove your ad revenue.\n\n\n\n\n!--  OPTIONAL PERMISSIONS --\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_NETWORK_STATE\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.ACCESS_FINE_LOCATION\n \n/\n\n\nuses-permission\n \nandroid:name=\nandroid.permission.READ_PHONE_STATE\n \n/\n\n\n\n\n\n\n\n\nAdd the Google Mobile Ads API by editing your \nbuild.gradle\n file add adding the line:\n\n\n\n\ndependencies\n \n{\n\n       \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nads\n:\n9.2\n.\n0\n\n\n}\n\n\n\n\n\n\n\n\nAdd the Google Play Services meta tag with the \napplication\n tags.\n\n\n\n\n!-- Example application --\n\n\napplication\n\n    \nandroid:allowBackup=\ntrue\n\n    \nandroid:icon=\n@drawable/ic_launcher\n\n    \nandroid:label=\n@string/app_name\n\n    \nandroid:theme=\n@style/AppTheme\n \n\n    \n!-- REQUIRED --\n\n    \nmeta-data\n\n        \nandroid:name=\ncom.google.android.gms.version\n\n        \nandroid:value=\n@integer/google_play_services_version\n \n/\n\n\n/application\n\n\n\n\n\n\n\n\nYou\nre now ready to integrate with the SpotX SDK. Refer to the selections\nbelow for example integrations.\n\n\n\n\nInterstitial Ad Integration\n#\n\n\nAn interstitial ad appears in a modal window, requiring the user to watch it\nbefore they can access other content.\n\n\n1. Initialize the SpotX SDK\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n\n}\n\n\n\n\n\n\n2. Create a SpotXAdBuilder\n#\n\n\nThe \nSpotXAdBuilder\n is a builder class that creates an ad request. The only\nprerequisite to building an ad request is a channel id.  There are also methods\navailable to add additional ad parameters; for more information on supported ad\nparameters see our \nGitHub Documentation\n.\nThe \nSpotXAdBuilder\n also supports custom parameters; custom parameters are\nvalues that you can pass to us and report on later.  For more information on\ncustom parameters, please contact a SpotX representative.\n\n\nSpotXAdBuilder Minimum Requirements\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n\n}\n\n\n\n\n\n\nSpotXAdBuilder With Additional Ad Parameters\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nsab\n.\nuseHTTPS\n(\ntrue\n);\n\n  \nsab\n.\nparam\n(\nmedia_transcoding[]\n,\n \nnew\n \nString\n[]{\nlow\n,\n \nmedium\n});\n\n\n}\n\n\n\n\n\n\nSpotXAdBuilder With Custom Ad Parameters\n#\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nsab\n.\ncustom\n(\ncustomParam\n,\n \ncustomValue\n);\n\n\n}\n\n\n\n\n\n\nFor the sake of conciseness the rest of this documentation will assume you\nare doing a bare minimum integration.\n\n\n3. Load Your Ad\n#\n\n\nThe \nSpotXAdBuilder\n has four load methods:\n1. \nload()\n will load 1 ad.\n2. \nloadWithCount(int count)\n will load \ncount\n number of ads.\n3. \nloadWithDuration(double duration)\n will load a number of ads whose cumulative duration is less than or equal to \nduration\n, in seconds.\n4. \nload(double duration, int count)\n will load a maximum number of ads with a maximum cumulative duration.\n\n\nThe return value of any of our \nload\n functions is a \nFuture\nSpotXAdGroup\n; by\nreturning a \nFuture\nSpotXAdGroup\n we give you the ability to set up your\napplication without being blocked by us retrieving your ads. If you wanted to\nads to play in succession, your integration might look like:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n\n  \n// Setup your app while we load ads in the background\n\n\n}\n\n\n\n\n\n\n4. Get Your SpotXAdGroup\n#\n\n\nThe \nSpotXAdGroup\n is a container holding all of your ads and all those ad\ns\ninformation. When a \nSpotXAdGroup\n plays it will play all of your ads in\nsuccession. To resolve a \nFuture\nSpotXAdGroup\n and get your \nSpotXAdGroup\n you\nwill want to call the future\ns \nget\n method. There are two \nget\n methods:\n1. \nget()\n - blocks your application until the future resolves\n2. \nget(long timeout, TimeUnit unit)\n - blocks until the future resolves or until\ntime has ran out.\n\n\nIt is strongly recommended that you use a timeout when resolving a future.\nFor more information review the \nAndroid Future Documentation\n.\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n  \n}\n\n  \ncatch\n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n  \n// Setup your app while we load ads in the background\n\n \n```\n\n\n\n####\n \n5\n.\n \nDisplay\n \nYour\n \nAd\n\n\nOnce\n \nyour\n \nhave\n \na\n \n`\nSpotXAdGroup\n`\n \nyou\n \ncan\n \nstart\n \nplaying\n \nads\n.\n \nYou\n \ncan\n \ndo\n \nso\n \nby\n\n\ncalling\n \none\n \nof\n \nour\n \npresentation\n \ncontrollers\n.\n \nIf\n \nyou\n \nwanted\n \nto\n \nplay\n \nan\n \ninterstitial\n\n\nad\n \nyour\n \nintegration\n \nmight\n \nlook\n \nlike\n:\n\n\n```\njava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n  \n}\n\n  \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n\n  \n// Setup your app while we load ads in the background\n\n\n  \nif\n \n(\nadGroup\n \n!=\n \nnull\n)\n \n{\n\n    \nInterstitialPresentationController\n.\nshow\n(\ngetApplicationContext\n(),\n \nadGroup\n);\n\n  \n}\n\n\n\n\n\n\nEvent Observer\n#\n\n\nThere may be times where you would like to listen to events. Events include:\n\n \nonGroupStart()\n - triggers before any ads starts playing\n\n \nonStart(SpotXAd ad)\n - triggers when a single ad starts playing\n\n \nonError(SpotXAd ad)\n - triggers if an error occurs during playtime\n\n \nonSkip(SpotXAd ad)\n - triggers if an ad gets skipped\n\n \nonClick(SpotXAd ad)\n - triggers if a user clicks through\n\n \nonTimeUpdate(SpotXAd ad, int elapsed)\n - triggers periodically and will return the current ad and the current elapsed time of the ad in milliseconds.\n\n \nonComplete(SpotXAd)\n - triggers when a single ad completes\n\n \nonGroupComplete()\n - triggers after all ads complete\n\n\nWe provide a \nSpotXAdGroup.Observer\n interface that you can implement to listen\nto these events. If this is of interest to you, then your integration might look\nlike:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nString\n \nchannelId\n \n=\n \n12345\n;\n\n  \nSpotX\n.\ninitialize\n(\ngetApplicationContext\n());\n\n  \nSpotXAdBuilder\n \nsab\n \n=\n \nSpotX\n.\nnewAdBuilder\n(\nchannelId\n);\n\n  \nFuture\nSpotXAdGroup\n \nadGroupFuture\n \n=\n \nsab\n.\nloadWithCount\n(\n2\n);\n\n  \nSpotXAdGroup\n \nadGroup\n \n=\n \nnull\n;\n\n  \ntry\n \n{\n\n    \nSpotXAdGroup\n \nadGroup\n \n=\n \nadGroupFuture\n.\nget\n(\n10000\n,\n \nTimeUnit\n.\nMILLISECONDS\n);\n\n    \nadGroup\n.\nregisterObserver\n(\nnew\n \nMyObserver\n());\n\n  \n}\n\n  \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \n// Handle exception\n\n  \n}\n\n\n  \n// Setup your app while we load ads in the background\n\n\n  \nif\n \n(\nadGroup\n \n!=\n \nnull\n)\n \n{\n\n    \nInterstitialPresentationController\n.\nshow\n(\ngetApplicationContext\n(),\n \nadGroup\n);\n\n  \n}\n\n\n  \nprivate\n \nclass\n \nMyObserver\n \nimplements\n \nSpotXAdGroup\n.\nObserver\n \n{\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonGroupStart\n()\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nStarting Group.\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonStart\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nStarting Ad\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonComplete\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Complete\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonSkip\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Skipped\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonError\n(\nSpotXAd\n \nad\n,\n \nError\n \nerror\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Error\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonGroupComplete\n()\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nGroup completed.\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonTimeUpdate\n(\nSpotXAd\n \nad\n,\n \nint\n \nelapsed\n)\n \n{\n\n          \n// do nothing\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nonClick\n(\nSpotXAd\n \nad\n)\n \n{\n\n          \nToast\n.\nmakeText\n(\nthis\n,\n \nAd Clicked\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n      \n}\n\n  \n}\n\n\n}", 
            "title": "SDK Quick Start"
        }, 
        {
            "location": "/android-sdk/#spotx-android-sdk-quick-start", 
            "text": "Example code and tutorial for displaying SpotX video ads in Android apps.", 
            "title": "SpotX Android SDK Quick Start"
        }, 
        {
            "location": "/android-sdk/#prerequisites", 
            "text": "Minimum API: 14 (Ice Cream Sandwich)  Target API: 24 (N)  SpotX publisher account  Apply to become a publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/android-sdk/#before-you-begin", 
            "text": "You ll need to be a SpotX publisher if you aren t already.  You will\nreceive  the SpotX SDK, a publisher ID, and an account to log into the  SpotX\nPublisher Tools .  From the Publisher Tools you will be able to create  channels  that define the\nentry point to connecting with advertisers.  You ll need to create a channel\nbefore you can use the SDK. Once a channel is created you will be given a\nchannel ID and you use this channel ID to integrate with the SDK.  Include the SpotX SDK as a dependency in your project in one of the following\nways:  Download the jar which contains the SpotX SDK Library, then - using Eclipse\n  or Android Studio - declare that jar as a file dependency.  Using Gradle, include the following in your build.gradle file:     repositories {\n      jcenter()\n  }\n  dependencies {\n        compile  com.spotxchange:spotx-sdk-android:3.+ \n  }  You can always download the latest version of the SpotX SDK from  Bintray ;\nthe latest version of the SpotX Demo App is also available on our  GitHub Repository .", 
            "title": "Before You Begin"
        }, 
        {
            "location": "/android-sdk/#setup-your-android-manifest", 
            "text": "The  AndroidManifest.xml  file defines permissions for your applications.\n1. Add  INTERNET  permission to the manifest file for your app, if it s not\nalready present.  !--- REQUIRED FOR INTERNET ACCESS ---  uses-permission   android:name= android.permission.INTERNET /    Optionally, you may also include any or all the following permissions, which will\nimprove your ad revenue.   !--  OPTIONAL PERMISSIONS --  uses-permission   android:name= android.permission.ACCESS_NETWORK_STATE   /  uses-permission   android:name= android.permission.ACCESS_COARSE_LOCATION   /  uses-permission   android:name= android.permission.ACCESS_FINE_LOCATION   /  uses-permission   android:name= android.permission.READ_PHONE_STATE   /    Add the Google Mobile Ads API by editing your  build.gradle  file add adding the line:   dependencies   { \n        compile   com . google . android . gms : play - services - ads : 9.2 . 0  }    Add the Google Play Services meta tag with the  application  tags.   !-- Example application --  application \n     android:allowBackup= true \n     android:icon= @drawable/ic_launcher \n     android:label= @string/app_name \n     android:theme= @style/AppTheme   \n     !-- REQUIRED -- \n     meta-data \n         android:name= com.google.android.gms.version \n         android:value= @integer/google_play_services_version   /  /application    You re now ready to integrate with the SpotX SDK. Refer to the selections\nbelow for example integrations.", 
            "title": "Setup Your Android Manifest"
        }, 
        {
            "location": "/android-sdk/#interstitial-ad-integration", 
            "text": "An interstitial ad appears in a modal window, requiring the user to watch it\nbefore they can access other content.", 
            "title": "Interstitial Ad Integration"
        }, 
        {
            "location": "/android-sdk/#1-initialize-the-spotx-sdk", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   SpotX . initialize ( getApplicationContext ());  }", 
            "title": "1. Initialize the SpotX SDK"
        }, 
        {
            "location": "/android-sdk/#2-create-a-spotxadbuilder", 
            "text": "The  SpotXAdBuilder  is a builder class that creates an ad request. The only\nprerequisite to building an ad request is a channel id.  There are also methods\navailable to add additional ad parameters; for more information on supported ad\nparameters see our  GitHub Documentation .\nThe  SpotXAdBuilder  also supports custom parameters; custom parameters are\nvalues that you can pass to us and report on later.  For more information on\ncustom parameters, please contact a SpotX representative.", 
            "title": "2. Create a SpotXAdBuilder"
        }, 
        {
            "location": "/android-sdk/#spotxadbuilder-minimum-requirements", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId );  }", 
            "title": "SpotXAdBuilder Minimum Requirements"
        }, 
        {
            "location": "/android-sdk/#spotxadbuilder-with-additional-ad-parameters", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   sab . useHTTPS ( true ); \n   sab . param ( media_transcoding[] ,   new   String []{ low ,   medium });  }", 
            "title": "SpotXAdBuilder With Additional Ad Parameters"
        }, 
        {
            "location": "/android-sdk/#spotxadbuilder-with-custom-ad-parameters", 
            "text": "@Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   sab . custom ( customParam ,   customValue );  }   For the sake of conciseness the rest of this documentation will assume you\nare doing a bare minimum integration.", 
            "title": "SpotXAdBuilder With Custom Ad Parameters"
        }, 
        {
            "location": "/android-sdk/#3-load-your-ad", 
            "text": "The  SpotXAdBuilder  has four load methods:\n1.  load()  will load 1 ad.\n2.  loadWithCount(int count)  will load  count  number of ads.\n3.  loadWithDuration(double duration)  will load a number of ads whose cumulative duration is less than or equal to  duration , in seconds.\n4.  load(double duration, int count)  will load a maximum number of ads with a maximum cumulative duration.  The return value of any of our  load  functions is a  Future SpotXAdGroup ; by\nreturning a  Future SpotXAdGroup  we give you the ability to set up your\napplication without being blocked by us retrieving your ads. If you wanted to\nads to play in succession, your integration might look like:  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n\n   // Setup your app while we load ads in the background  }", 
            "title": "3. Load Your Ad"
        }, 
        {
            "location": "/android-sdk/#4-get-your-spotxadgroup", 
            "text": "The  SpotXAdGroup  is a container holding all of your ads and all those ad s\ninformation. When a  SpotXAdGroup  plays it will play all of your ads in\nsuccession. To resolve a  Future SpotXAdGroup  and get your  SpotXAdGroup  you\nwill want to call the future s  get  method. There are two  get  methods:\n1.  get()  - blocks your application until the future resolves\n2.  get(long timeout, TimeUnit unit)  - blocks until the future resolves or until\ntime has ran out.  It is strongly recommended that you use a timeout when resolving a future.\nFor more information review the  Android Future Documentation .  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n   } \n   catch ( Exception   e )   { \n     // Handle exception \n   } \n   // Setup your app while we load ads in the background \n  ```  ####   5 .   Display   Your   Ad  Once   your   have   a   ` SpotXAdGroup `   you   can   start   playing   ads .   You   can   do   so   by  calling   one   of   our   presentation   controllers .   If   you   wanted   to   play   an   interstitial  ad   your   integration   might   look   like :  ``` java  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n   } \n   catch   ( Exception   e )   { \n     // Handle exception \n   } \n\n   // Setup your app while we load ads in the background \n\n   if   ( adGroup   !=   null )   { \n     InterstitialPresentationController . show ( getApplicationContext (),   adGroup ); \n   }", 
            "title": "4. Get Your SpotXAdGroup"
        }, 
        {
            "location": "/android-sdk/#event-observer", 
            "text": "There may be times where you would like to listen to events. Events include:   onGroupStart()  - triggers before any ads starts playing   onStart(SpotXAd ad)  - triggers when a single ad starts playing   onError(SpotXAd ad)  - triggers if an error occurs during playtime   onSkip(SpotXAd ad)  - triggers if an ad gets skipped   onClick(SpotXAd ad)  - triggers if a user clicks through   onTimeUpdate(SpotXAd ad, int elapsed)  - triggers periodically and will return the current ad and the current elapsed time of the ad in milliseconds.   onComplete(SpotXAd)  - triggers when a single ad completes   onGroupComplete()  - triggers after all ads complete  We provide a  SpotXAdGroup.Observer  interface that you can implement to listen\nto these events. If this is of interest to you, then your integration might look\nlike:  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   String   channelId   =   12345 ; \n   SpotX . initialize ( getApplicationContext ()); \n   SpotXAdBuilder   sab   =   SpotX . newAdBuilder ( channelId ); \n   Future SpotXAdGroup   adGroupFuture   =   sab . loadWithCount ( 2 ); \n   SpotXAdGroup   adGroup   =   null ; \n   try   { \n     SpotXAdGroup   adGroup   =   adGroupFuture . get ( 10000 ,   TimeUnit . MILLISECONDS ); \n     adGroup . registerObserver ( new   MyObserver ()); \n   } \n   catch   ( Exception   e )   { \n     // Handle exception \n   } \n\n   // Setup your app while we load ads in the background \n\n   if   ( adGroup   !=   null )   { \n     InterstitialPresentationController . show ( getApplicationContext (),   adGroup ); \n   } \n\n   private   class   MyObserver   implements   SpotXAdGroup . Observer   { \n       @Override \n       public   void   onGroupStart ()   { \n           Toast . makeText ( this ,   Starting Group. ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onStart ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Starting Ad ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onComplete ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Complete ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onSkip ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Skipped ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onError ( SpotXAd   ad ,   Error   error )   { \n           Toast . makeText ( this ,   Ad Error ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onGroupComplete ()   { \n           Toast . makeText ( this ,   Group completed. ,   Toast . LENGTH_SHORT ). show (); \n       } \n\n       @Override \n       public   void   onTimeUpdate ( SpotXAd   ad ,   int   elapsed )   { \n           // do nothing \n       } \n\n       @Override \n       public   void   onClick ( SpotXAd   ad )   { \n           Toast . makeText ( this ,   Ad Clicked ,   Toast . LENGTH_SHORT ). show (); \n       } \n   }  }", 
            "title": "Event Observer"
        }, 
        {
            "location": "/android-sdk-advanced/", 
            "text": "SpotX Android SDK Advanced Documentation\n#\n\n\nAdvanced documentation for SpotX Android SDK\n\n\nOptional Ad Parameters\n#\n\n\nYou may specify additional parameters to refine your ad request with SpotX. The values for the following parameters should adhere to the \nOpenRTB API Specification 2.2\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp[cat]\n\n\nArray of IAB content categories for the overall application.\n\n\n\n\n\n\napp[privacypolicy]\n\n\nSpecifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.\n\n\n\n\n\n\napp[storeurl]\n\n\nFor QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.\n\n\n\n\n\n\napp[content][language]\n\n\nLanguage of the content. Use alpha-2/ISO 639-1 codes.\n\n\n\n\n\n\napp[content][contentrating]\n\n\nContent rating (e.g., MPAA)\n\n\n\n\n\n\ndevice[dnt]\n\n\nIf \n1\n, then tracking is set to true, \n0\n for false.", 
            "title": "Advanced Documentation"
        }, 
        {
            "location": "/android-sdk-advanced/#spotx-android-sdk-advanced-documentation", 
            "text": "Advanced documentation for SpotX Android SDK", 
            "title": "SpotX Android SDK Advanced Documentation"
        }, 
        {
            "location": "/android-sdk-advanced/#optional-ad-parameters", 
            "text": "You may specify additional parameters to refine your ad request with SpotX. The values for the following parameters should adhere to the  OpenRTB API Specification 2.2 .     Parameter  Description      app[cat]  Array of IAB content categories for the overall application.    app[privacypolicy]  Specifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.    app[storeurl]  For QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.    app[content][language]  Language of the content. Use alpha-2/ISO 639-1 codes.    app[content][contentrating]  Content rating (e.g., MPAA)    device[dnt]  If  1 , then tracking is set to true,  0  for false.", 
            "title": "Optional Ad Parameters"
        }, 
        {
            "location": "/ios-sdk/", 
            "text": "SpotX iOS SDK Quick Start\n#\n\n\nPrerequisites\n#\n\n\nYou\nll need to apply to become a SpotX publisher if you haven\nt already. You\nll receive the SpotXchange\ns SDK, a publisher channel ID, and an account to log in to \nSpotXchange\ns Publisher Tools\n.\n\n\n\n\nApply to become a SpotX Publisher\n\n\n\n\nWhat You Need\n#\n\n\n\n\nAn IAB Category number that best categorizes your app (ex: \nIAB1\n)\n\n\nIAB Specification\n (section 6.1 page 54)\n\n\nIAB Category List\n\n\n\n\n\n\nYour App domain\n\n\nex: http://www.example.com\n\n\n\n\n\n\nYour App Store URL\n\n\nex: https://itunes.apple.com/us/app/example/id123456789\n\n\n\n\n\n\nXcode 6\n\n\n\n\nGetting Started\n#\n\n\nInstallation with CocoaPods\n#\n\n\nInstallation with \nCocoaPods\n is an alternative to downloading the SDK. CocoaPods is a dependency manager for iOS and Mac apps, which automates and simplifies the process of using 3rd-party libraries in your projects.\n\n\npod\n \nSpotX-SDK\n\n\n\n\n\n\nManual Installation\n#\n\n\nDownload the latest SDK from the SpotX \nGithub Repository\n.\n\n\nThe SpotX SDK makes use of many iOS core frameworks. Add the following frameworks to your app:\n\n\n\n\nAdManager.framework\n\n\nAdSupport.framework\n\n\nCoreData.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nFoundation.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nUIKit.framework\n\n\n\n\nUnder \nBuild Settings \n Other Linker Flags\n set the following flag:\n\n\n-all_load\n\n\n\n\n\nUsing the SDK\n#\n\n\nInitialize the SpotX SDK\n#\n\n\n// File: AppDelegate.m\n\n\n\n#import \nUIKit/UIKit.h\n\n\n#import \nAdManager/SpotX.h\n\n\n\n@implementation\n \nAppDelegate\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n\n\n{\n\n    \n// Required: Initialize SpotX SDK\n\n    \n[\nSpotX\n \ninitializeWithApiKey\n:\nnil\n \ncategory\n:\n@\nIAB1\n \nsection\n:\n@\nFiction\n\n        \ndomain\n:\n@\nwww.spotxchange.com\n\n            \nurl\n:\n@\nhttps://itunes.apple.com/us/app/spotxchange_advertisments/id123456789\n];\n\n\n    \n// Optional: Set default channel id\n\n    \n[\nSpotX\n \nsetDefaultChannelID\n:\n110681\n];\n\n\n    \n// Optional: Configure default settings\n\n    \nid\nSpotXAdSettings\n \nsettings\n \n=\n \n[\nSpotX\n \ndefaultSettings\n];\n\n    \nsettings\n.\nuseHTTPS\n \n=\n \n@YES\n;\n\n    \nsettings\n.\nuseNativeBrowser\n \n=\n \n@YES\n;\n\n    \nsettings\n.\nallowCalendar\n \n=\n \n@NO\n;\n\n\n    \n// Optional: Configure default custom parameters (Custom Taxonomy)\n\n    \n[\nSpotX\n \nsetDefaultParameters\n:\n@{\n\n        \n@\ncustom_param\n:\n \n@\ncustom_value\n\n    \n}\n];\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n@end\n\n\n\n\n\n\nShow an Ad\n#\n\n\n// File: ViewController.m\n\n\n\n#import \nViewController.h\n\n\n\n#import \nAdManager/SpotX.h\n\n\n\n\n@interface\n \nViewController\n \n()\n \nSpotXAdDelegate\n\n\n\n@property\n \n(\nnonatomic\n,\n \nstrong\n)\n \nSpotXAdView\n \n*\nadView\n;\n\n\n\n@end\n\n\n\n\n@implementation\n \nViewController\n\n\n\n-\n \n(\nvoid\n)\nviewDidLoad\n\n\n{\n\n    \n[\nsuper\n \nviewDidLoad\n];\n\n\n    \n// NOTE: We create a SpotXView and call -startLoading right away\n\n    \n//       so it is cached when we are ready to show it.\n\n    \n_adView\n \n=\n \n[[\nSpotXView\n \nalloc\n]\n \ninitWithFrame\n:\nself\n.\nview\n.\nbounds\n];\n\n     \n_adView\n.\ndelegate\n \n=\n \nself\n;\n\n     \n[\n_adView\n \nstartLoading\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nshowAd\n\n\n{\n\n    \n// Show the Ad. If the ad is still loading, it may take a\n\n    \n// few seconds for the video to start.\n\n    \n[\nself\n.\nadView\n \nshow\n];\n\n\n}\n\n\n\n\n#pragma mark - SpotXAdViewDelegate\n\n\n\n-\n \n(\nvoid\n)\npresentViewController:\n(\nUIViewController\n \n*\n)\nviewControllerToPresent\n\n\n{\n\n    \n[\nself\n \npresentViewController\n:\nviewControllerToPresent\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nadLoaded\n\n\n{\n\n  \nNSLog\n(\n@\nAd is cached and ready to play\n);\n\n\n}\n\n\n\n@end", 
            "title": "SDK Quick Start"
        }, 
        {
            "location": "/ios-sdk/#spotx-ios-sdk-quick-start", 
            "text": "", 
            "title": "SpotX iOS SDK Quick Start"
        }, 
        {
            "location": "/ios-sdk/#prerequisites", 
            "text": "You ll need to apply to become a SpotX publisher if you haven t already. You ll receive the SpotXchange s SDK, a publisher channel ID, and an account to log in to  SpotXchange s Publisher Tools .   Apply to become a SpotX Publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/ios-sdk/#what-you-need", 
            "text": "An IAB Category number that best categorizes your app (ex:  IAB1 )  IAB Specification  (section 6.1 page 54)  IAB Category List    Your App domain  ex: http://www.example.com    Your App Store URL  ex: https://itunes.apple.com/us/app/example/id123456789    Xcode 6", 
            "title": "What You Need"
        }, 
        {
            "location": "/ios-sdk/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/ios-sdk/#installation-with-cocoapods", 
            "text": "Installation with  CocoaPods  is an alternative to downloading the SDK. CocoaPods is a dependency manager for iOS and Mac apps, which automates and simplifies the process of using 3rd-party libraries in your projects.  pod   SpotX-SDK", 
            "title": "Installation with CocoaPods"
        }, 
        {
            "location": "/ios-sdk/#manual-installation", 
            "text": "Download the latest SDK from the SpotX  Github Repository .  The SpotX SDK makes use of many iOS core frameworks. Add the following frameworks to your app:   AdManager.framework  AdSupport.framework  CoreData.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  Foundation.framework  SystemConfiguration.framework  Security.framework  UIKit.framework   Under  Build Settings   Other Linker Flags  set the following flag:  -all_load", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/ios-sdk/#using-the-sdk", 
            "text": "", 
            "title": "Using the SDK"
        }, 
        {
            "location": "/ios-sdk/#initialize-the-spotx-sdk", 
            "text": "// File: AppDelegate.m  #import  UIKit/UIKit.h  #import  AdManager/SpotX.h  @implementation   AppDelegate  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions  { \n     // Required: Initialize SpotX SDK \n     [ SpotX   initializeWithApiKey : nil   category : @ IAB1   section : @ Fiction \n         domain : @ www.spotxchange.com \n             url : @ https://itunes.apple.com/us/app/spotxchange_advertisments/id123456789 ]; \n\n     // Optional: Set default channel id \n     [ SpotX   setDefaultChannelID : 110681 ]; \n\n     // Optional: Configure default settings \n     id SpotXAdSettings   settings   =   [ SpotX   defaultSettings ]; \n     settings . useHTTPS   =   @YES ; \n     settings . useNativeBrowser   =   @YES ; \n     settings . allowCalendar   =   @NO ; \n\n     // Optional: Configure default custom parameters (Custom Taxonomy) \n     [ SpotX   setDefaultParameters : @{ \n         @ custom_param :   @ custom_value \n     } ]; \n\n     return   YES ;  }  @end", 
            "title": "Initialize the SpotX SDK"
        }, 
        {
            "location": "/ios-sdk/#show-an-ad", 
            "text": "// File: ViewController.m  #import  ViewController.h  #import  AdManager/SpotX.h  @interface   ViewController   ()   SpotXAdDelegate  @property   ( nonatomic ,   strong )   SpotXAdView   * adView ;  @end  @implementation   ViewController  -   ( void ) viewDidLoad  { \n     [ super   viewDidLoad ]; \n\n     // NOTE: We create a SpotXView and call -startLoading right away \n     //       so it is cached when we are ready to show it. \n     _adView   =   [[ SpotXView   alloc ]   initWithFrame : self . view . bounds ]; \n      _adView . delegate   =   self ; \n      [ _adView   startLoading ];  }  -   ( void ) showAd  { \n     // Show the Ad. If the ad is still loading, it may take a \n     // few seconds for the video to start. \n     [ self . adView   show ];  }  #pragma mark - SpotXAdViewDelegate  -   ( void ) presentViewController: ( UIViewController   * ) viewControllerToPresent  { \n     [ self   presentViewController : viewControllerToPresent   animated : YES   completion : nil ];  }  -   ( void ) adLoaded  { \n   NSLog ( @ Ad is cached and ready to play );  }  @end", 
            "title": "Show an Ad"
        }, 
        {
            "location": "/avplayer-sdk/", 
            "text": "SpotX SDK for AvPlayer\n#\n\n\nThe \nSpotX SDK for AVPlayer\n provides seamless integration with Apple\ns AVKit framework.\n\n\n\n\nAd Preloading\n\n\nFlexible Placement Options (pre-/post-/mid-roll, standalone)\n\n\nClient-side Ad Stitching\n\n\nAccess to underlying AVPlayerItem for advanced ad placements\n\n\n\n\nPrerequisites\n#\n\n\n\n\nXcode 7\n\n\nAdd SpotX.framework to your Xcode project\n\n\nA SpotX publisher account\n\n\nApply to become a SpotX Publisher\n\n\n\n\n\n\n\n\nRequesting an Ad\n#\n\n\nimport\n \nSpotX\n\n\n\nstatic\n \nlet\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nSpotX\n.\nadForChannel\n(\nCHANNEL_ID\n,\n \nparams\n:\nnil\n \ncompletion\n:{\n\n    \n(\nad\n:\nSPXAdController\n?,\n \nerror\n:\nNSError\n?)\n \n-\n \nvoid\n \nin\n\n\n      \nif\n \nlet\n \n_\n \n=\n \nad\n \n{\n\n        \n// do something with the ad -- show it now, or save for later\n\n      \n}\n\n      \nelse\n \nif\n \nlet\n \n_\n \n=\n \nerror\n \n{\n\n        \n// underlying transmission error\n\n      \n}\n\n      \nelse\n \n{\n\n        \n// no ad was available\n\n      \n}\n\n\n})\n\n\n\n\n\n\nPresenting an Ad in a TVML App\n#\n\n\n\n\nLoad the SpotX SDK. Don\nt worry, there are no additional dependencies.\n\n\nLoad up a SpotX Ad with your publisher channel ID.\n\n\nAdd any additional parameters you wish to collect (see below).\n\n\nPass a callback to receive the SpotXAdPlayer.\n\n\nAdd event listeners to the player, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling \nplayer.standalone().play()\n.\n\n\n\n\nimport\n \nSpotX\n\n\n\nvar\n \nplayer\n \n:\n \nAVQueuePlayer\n;\n\n\nvar\n \nad\n \n:\n \nSPXAdController\n;\n\n\n\n...\n\n\n\n// Inserts the ad at the front of the play queue\n\n\nad\n.\npreRoll\n(\nplayer\n)\n\n\n\n// Appends the ad to end end of the play queue\n\n\nad\n.\npostRoll\n(\nplayer\n)\n\n\n\n// Inserts the ad at the third position in the play queue\n\n\nad\n.\nmidRoll\n(\nplayer\n,\n \n2\n)\n\n\n\n// Client-side Ad Stitching: Plays an ad immediately using the given player.\n\n\nad\n.\nplay\n(\nplayer\n,\n \ncompletion\n:{\n\n    \n// callback invoked when the ad has finished\n\n    \n// and the original video content is restored\n\n\n})\n\n\n\n\n\n\nCustomizing the Ad Request\n#\n\n\nYou may specify additional parameters to refine your Ad request query with SpotX. The values for the following parameters should adhere to the \nOpenRTB API Specification 2.2\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp[name]\n\n\nApplication name (may be masked at publisher\u2019s request).\n\n\n\n\n\n\napp[domain]\n\n\nDomain of the application (e.g.,\u201cmygame.foo.com\u201d).\n\n\n\n\n\n\napp[cat]\n\n\nArray of IAB content categories for the overall application.\n\n\n\n\n\n\napp[ver]\n\n\nApplication version.\n\n\n\n\n\n\napp[privacypolicy]\n\n\nSpecifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.\n\n\n\n\n\n\napp[storeurl]\n\n\nFor QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.\n\n\n\n\n\n\napp[content][language]\n\n\nLanguage of the content. Use alpha-2/ISO 639-1 codes.\n\n\n\n\n\n\napp[content][contentrating]\n\n\nContent rating (e.g., MPAA)\n\n\n\n\n\n\ndevice[dnt]\n\n\nIf \u201c0\u201d, then do not track Is set to false, if \u201c1\u201d, then do no track is set to true in browser.\n\n\n\n\n\n\ndevice[geo][lon]\n\n\nLongitude from -180 to 180. West is negative. This should only be passed if known to be accurate.\n\n\n\n\n\n\ndevice[geo][lat]\n\n\nLatitude from -90 to 90. South is negative. This should only be passed if known to be accurate\n\n\n\n\n\n\n\n\nNOTE:\n Additional parameters (sometimes referred to as custom taxonomy) may be provided and will be stored along with your ad request.\n\n\nExample\n#\n\n\nlet\n \nparams\n \n=\n \n[\n\n  \napp[ver]\n:\n \n1.0\n,\n\n  \nmy_custom_param\n:\n \nmy_custom_value\n\n\n]\n\n\n\nSpotX\n \nadForChannel\n(\nCHANNEL_ID\n,\n \nparams\n:\nparams\n \ncompletion\n:{\n\n    \n(\nad\n:\nSPXAdController\n?,\n \nerror\n:\nNSError\n?)\n \n-\n \nvoid\n \nin\n\n      \n//...\n\n\n})", 
            "title": "AVPlayer"
        }, 
        {
            "location": "/avplayer-sdk/#spotx-sdk-for-avplayer", 
            "text": "The  SpotX SDK for AVPlayer  provides seamless integration with Apple s AVKit framework.   Ad Preloading  Flexible Placement Options (pre-/post-/mid-roll, standalone)  Client-side Ad Stitching  Access to underlying AVPlayerItem for advanced ad placements", 
            "title": "SpotX SDK for AvPlayer"
        }, 
        {
            "location": "/avplayer-sdk/#prerequisites", 
            "text": "Xcode 7  Add SpotX.framework to your Xcode project  A SpotX publisher account  Apply to become a SpotX Publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/avplayer-sdk/#requesting-an-ad", 
            "text": "import   SpotX  static   let   CHANNEL_ID   =   85394  SpotX . adForChannel ( CHANNEL_ID ,   params : nil   completion :{ \n     ( ad : SPXAdController ?,   error : NSError ?)   -   void   in \n\n       if   let   _   =   ad   { \n         // do something with the ad -- show it now, or save for later \n       } \n       else   if   let   _   =   error   { \n         // underlying transmission error \n       } \n       else   { \n         // no ad was available \n       }  })", 
            "title": "Requesting an Ad"
        }, 
        {
            "location": "/avplayer-sdk/#presenting-an-ad-in-a-tvml-app", 
            "text": "Load the SpotX SDK. Don t worry, there are no additional dependencies.  Load up a SpotX Ad with your publisher channel ID.  Add any additional parameters you wish to collect (see below).  Pass a callback to receive the SpotXAdPlayer.  Add event listeners to the player, if you are interested in Ad lifecycle events.  Present the Ad by calling  player.standalone().play() .   import   SpotX  var   player   :   AVQueuePlayer ;  var   ad   :   SPXAdController ;  ...  // Inserts the ad at the front of the play queue  ad . preRoll ( player )  // Appends the ad to end end of the play queue  ad . postRoll ( player )  // Inserts the ad at the third position in the play queue  ad . midRoll ( player ,   2 )  // Client-side Ad Stitching: Plays an ad immediately using the given player.  ad . play ( player ,   completion :{ \n     // callback invoked when the ad has finished \n     // and the original video content is restored  })", 
            "title": "Presenting an Ad in a TVML App"
        }, 
        {
            "location": "/avplayer-sdk/#customizing-the-ad-request", 
            "text": "You may specify additional parameters to refine your Ad request query with SpotX. The values for the following parameters should adhere to the  OpenRTB API Specification 2.2 .     Parameter  Description      app[name]  Application name (may be masked at publisher\u2019s request).    app[domain]  Domain of the application (e.g.,\u201cmygame.foo.com\u201d).    app[cat]  Array of IAB content categories for the overall application.    app[ver]  Application version.    app[privacypolicy]  Specifies whether the app has a privacy policy. \u201c1\u201d means there is a policy and \u201c0\u201d means there is not.    app[storeurl]  For QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.    app[content][language]  Language of the content. Use alpha-2/ISO 639-1 codes.    app[content][contentrating]  Content rating (e.g., MPAA)    device[dnt]  If \u201c0\u201d, then do not track Is set to false, if \u201c1\u201d, then do no track is set to true in browser.    device[geo][lon]  Longitude from -180 to 180. West is negative. This should only be passed if known to be accurate.    device[geo][lat]  Latitude from -90 to 90. South is negative. This should only be passed if known to be accurate     NOTE:  Additional parameters (sometimes referred to as custom taxonomy) may be provided and will be stored along with your ad request.", 
            "title": "Customizing the Ad Request"
        }, 
        {
            "location": "/avplayer-sdk/#example", 
            "text": "let   params   =   [ \n   app[ver] :   1.0 , \n   my_custom_param :   my_custom_value  ]  SpotX   adForChannel ( CHANNEL_ID ,   params : params   completion :{ \n     ( ad : SPXAdController ?,   error : NSError ?)   -   void   in \n       //...  })", 
            "title": "Example"
        }, 
        {
            "location": "/tvml-sdk/", 
            "text": "SpotX tvOS Integration\n#\n\n\nMonetize your tvOS app with SpotX!\n\n\nPrerequisites\n#\n\n\n\n\nXcode 7.1.1\n\n\nSpotX publisher account\n\n\nApply to become a SpotX Publisher\n\n\n\n\n\n\n\n\nPresenting an Ad in a Native App\n#\n\n\n\n\nInclude SpotXAd.swift in your project. Don\nt worry, there are no additional dependencies.\n\n\nInstantiate a SpotXAd instance with your publisher channel ID and any additional parameters you wish to collect.\n\n\nAttach an implementation of the SpotXAdDelegate protocol, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling SpotXAd.show().\n\n\n\n\nstatic\n \nlet\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nfunc\n \nplayAd\n()\n \n{\n\n    \nself\n.\nad\n \n=\n \nSpotXAd\n(\nchannelId\n:\n \nCHANNEL_ID\n,\n \ndelegate\n:\n \nself\n)\n\n    \nself\n.\nad\n?.\nshow\n(\nself\n,\n \nanimated\n:\n \ntrue\n)\n\n\n}\n\n\n\n\n\n\nPresenting an Ad in a TVML App\n#\n\n\n\n\nLoad the SpotX SDK. Don\nt worry, there are no additional dependencies.\n\n\nLoad up a SpotX Ad with your publisher channel ID.\n\n\nAdd any additional parameters you wish to collect.\n\n\nPass a callback to receive the SpotXAdPlayer.\n\n\nAdd event listeners to the player, if you are interested in Ad lifecycle events.\n\n\nPresent the Ad by calling \nplayer.standalone().play()\n.\n\n\n\n\n// NOTE: Subject to change after prerelease development\n\n\nvar\n \nSPOTX_SDK\n \n=\n \nhttps://m.spotx.ninja/tvos/v2/sdk.js\n;\n\n\nvar\n \nCHANNEL_ID\n \n=\n \n85394\n\n\n\nApp\n.\nonLaunch\n \n=\n \nfunction\n(\noptions\n)\n \n{\n\n  \nevaluateScripts\n([\nSPOTX_SDK\n],\n \nfunction\n()\n \n{\n\n    \nloadAd\n();\n\n  \n});\n\n\n};\n\n\n\nfunction\n \nloadAd\n()\n \n{\n\n  \nvar\n \nparams\n \n=\n \n{\n\n    \ncustom_1\n:\n \ncustom-param\n\n  \n};\n\n\n  \nSpotX\n.\nload\n(\nCHANNEL_ID\n,\n \nparams\n,\n \nfunction\n \n(\nerror\n,\n \nplayer\n)\n \n{\n\n      \nvar\n \nAD_EVENTS\n \n=\n \n[\nAdStarted\n,\n \nAdStopped\n,\n \nAdError\n];\n\n      \nAD_EVENTS\n.\nforEach\n(\nfunction\n(\nevent\n)\n \n{\n\n        \nplayer\n.\naddEventListener\n(\nevent\n,\n \nfunction\n()\n \n{\n\n          \nconsole\n.\nlog\n(\nReceived event: \n \n+\n \nevent\n);\n\n        \n});\n\n      \n});\n\n\n      \nplayer\n.\nstandalone\n().\nplay\n();\n\n  \n});\n\n\n}", 
            "title": "TVML"
        }, 
        {
            "location": "/tvml-sdk/#spotx-tvos-integration", 
            "text": "Monetize your tvOS app with SpotX!", 
            "title": "SpotX tvOS Integration"
        }, 
        {
            "location": "/tvml-sdk/#prerequisites", 
            "text": "Xcode 7.1.1  SpotX publisher account  Apply to become a SpotX Publisher", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/tvml-sdk/#presenting-an-ad-in-a-native-app", 
            "text": "Include SpotXAd.swift in your project. Don t worry, there are no additional dependencies.  Instantiate a SpotXAd instance with your publisher channel ID and any additional parameters you wish to collect.  Attach an implementation of the SpotXAdDelegate protocol, if you are interested in Ad lifecycle events.  Present the Ad by calling SpotXAd.show().   static   let   CHANNEL_ID   =   85394  func   playAd ()   { \n     self . ad   =   SpotXAd ( channelId :   CHANNEL_ID ,   delegate :   self ) \n     self . ad ?. show ( self ,   animated :   true )  }", 
            "title": "Presenting an Ad in a Native App"
        }, 
        {
            "location": "/tvml-sdk/#presenting-an-ad-in-a-tvml-app", 
            "text": "Load the SpotX SDK. Don t worry, there are no additional dependencies.  Load up a SpotX Ad with your publisher channel ID.  Add any additional parameters you wish to collect.  Pass a callback to receive the SpotXAdPlayer.  Add event listeners to the player, if you are interested in Ad lifecycle events.  Present the Ad by calling  player.standalone().play() .   // NOTE: Subject to change after prerelease development  var   SPOTX_SDK   =   https://m.spotx.ninja/tvos/v2/sdk.js ;  var   CHANNEL_ID   =   85394  App . onLaunch   =   function ( options )   { \n   evaluateScripts ([ SPOTX_SDK ],   function ()   { \n     loadAd (); \n   });  };  function   loadAd ()   { \n   var   params   =   { \n     custom_1 :   custom-param \n   }; \n\n   SpotX . load ( CHANNEL_ID ,   params ,   function   ( error ,   player )   { \n       var   AD_EVENTS   =   [ AdStarted ,   AdStopped ,   AdError ]; \n       AD_EVENTS . forEach ( function ( event )   { \n         player . addEventListener ( event ,   function ()   { \n           console . log ( Received event:    +   event ); \n         }); \n       }); \n\n       player . standalone (). play (); \n   });  }", 
            "title": "Presenting an Ad in a TVML App"
        }, 
        {
            "location": "/android-mopub-adapter/", 
            "text": "Who Can Use the Plugin\n#\n\n\nTo use the plugin, you need to be a SpotXchange publisher and have an active account with MoPub.\n\n\nBecome a SpotXchange Publisher\n#\n\n\nIf you are not already a SpotXchange publisher, click \nhere\n to apply.\n\n\nCreate a MoPub Account\n#\n\n\nIf you don\nt yet have a MoPub account, click \nhere\n to sign up.\n\n\nWhat the Plugin Does\n#\n\n\nThe plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.\n\n\nHow to Install the Plugin\n#\n\n\nThere are three ways to install this plugin:\n\n\nGradle Dependency (preferred)\n#\n\n\nSimply add the following to your build.gradle.\n\n\ncompile\n \ncom.spotxchange:spotx-mopub-android:+\n\n\n\n\n\n\nMaven Dependency\n#\n\n\nDeclare the dependency in Maven:\n\n\ndependency\n\n    \ngroupId\ncom.spotxchange\n/groupId\n\n    \nartifactId\nspotx-mopub-android\n/artifactId\n\n    \nversion\n1.0\n/version\n\n\n/dependency\n\n\n\n\n\n\nAs a Library Project\n#\n\n\nDownload the source code and import it as a library project in Android Studio or Eclipse. The project is available from our GitHub repository \nhere\n.\n\n\nGet more information on how to do this \nhere\n.\n\n\nConfiguration\n#\n\n\nUse the custom data field to pass configuration parameters to the SpotX plugin. Get more information on MoPub custom events \nhere\n. The custom data is a \nJSON\n object with the following keys:\n\n\n\n\nchannel_id - Your SpotXchange  publisher channel ID\n\n\nplaystore_url - URL to your app in the Google Play store.\n\n\napp_domain - Internet domain for your app\ns website\n\n\niab_category - IAB category used to classify your app\n\n\nin_app_browser - If true, ad interactions will be displayed in an internal browser rather than the system default\n\n\n\n\nGet step-by-step instructions on how to specify parameters through the MoPub UI \nhere\n.", 
            "title": "MoPub Android"
        }, 
        {
            "location": "/android-mopub-adapter/#who-can-use-the-plugin", 
            "text": "To use the plugin, you need to be a SpotXchange publisher and have an active account with MoPub.", 
            "title": "Who Can Use the Plugin"
        }, 
        {
            "location": "/android-mopub-adapter/#become-a-spotxchange-publisher", 
            "text": "If you are not already a SpotXchange publisher, click  here  to apply.", 
            "title": "Become a SpotXchange Publisher"
        }, 
        {
            "location": "/android-mopub-adapter/#create-a-mopub-account", 
            "text": "If you don t yet have a MoPub account, click  here  to sign up.", 
            "title": "Create a MoPub Account"
        }, 
        {
            "location": "/android-mopub-adapter/#what-the-plugin-does", 
            "text": "The plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.", 
            "title": "What the Plugin Does"
        }, 
        {
            "location": "/android-mopub-adapter/#how-to-install-the-plugin", 
            "text": "There are three ways to install this plugin:", 
            "title": "How to Install the Plugin"
        }, 
        {
            "location": "/android-mopub-adapter/#gradle-dependency-preferred", 
            "text": "Simply add the following to your build.gradle.  compile   com.spotxchange:spotx-mopub-android:+", 
            "title": "Gradle Dependency (preferred)"
        }, 
        {
            "location": "/android-mopub-adapter/#maven-dependency", 
            "text": "Declare the dependency in Maven:  dependency \n     groupId com.spotxchange /groupId \n     artifactId spotx-mopub-android /artifactId \n     version 1.0 /version  /dependency", 
            "title": "Maven Dependency"
        }, 
        {
            "location": "/android-mopub-adapter/#as-a-library-project", 
            "text": "Download the source code and import it as a library project in Android Studio or Eclipse. The project is available from our GitHub repository  here .  Get more information on how to do this  here .", 
            "title": "As a Library Project"
        }, 
        {
            "location": "/android-mopub-adapter/#configuration", 
            "text": "Use the custom data field to pass configuration parameters to the SpotX plugin. Get more information on MoPub custom events  here . The custom data is a  JSON  object with the following keys:   channel_id - Your SpotXchange  publisher channel ID  playstore_url - URL to your app in the Google Play store.  app_domain - Internet domain for your app s website  iab_category - IAB category used to classify your app  in_app_browser - If true, ad interactions will be displayed in an internal browser rather than the system default   Get step-by-step instructions on how to specify parameters through the MoPub UI  here .", 
            "title": "Configuration"
        }, 
        {
            "location": "/ios-mopub-adapter/", 
            "text": "Who Can Use the Plugin\n#\n\n\nTo use the plugin, you need to be a SpotX publisher and have an active account with MoPub.\n\n\nBecome a SpotX Publisher\n#\n\n\nIf you are not already a SpotX publisher, click \nhere\n to apply.\n\n\nCreate a MoPub Account\n#\n\n\nIf you don\nt yet have a MoPub account, click \nhere\n to sign up.\n\n\nWhat the Plugin Does\n#\n\n\nThe plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.\n\n\nHow to Install the Plugin\n#\n\n\nThere are two ways to install this plugin:\n\n\nCocoaPods (preferred)\n#\n\n\nSimply add the following to your Podfile.\n\n\npod\n \nSpotX-MoPub-Plugin\n\n\n\n\n\n\nSource Code\n#\n\n\nDownload the source code and import it in your Xcode project. The project is available from our \nGithub repository\n.\n\n\nConfiguration\n#\n\n\nUse the custom data field to pass configuration parameters to the SpotX plugin. Additional details are available in the documentation for \nMoPub Custom Events\n. The custom data is a \nJSON\n object with the following required keys:\n\n\n\n\nchannel_id - Your SpotX publisher channel ID\n\n\niab_category - IAB category used to classify your app\n\n\niab_section - IAB category subsection used to classify your app\n\n\nappstore_url - URL to your app in the Apple App store.\n\n\napp_domain - Internet domain for your app\ns website\n\n\n\n\nIn addition to the required properties, you may also include any of the following optional keys (*default value in parenthesis):\n\n\n\n\nuse_https - (\nfalse\n) All network requests will be done over HTTPS\n\n\nuse_native_browser - (\ntrue\n) If false, ad interactions will be displayed in an internal browser rather than the system default\n\n\nallow_calendar - (\nfalse\n) Allow ads to create calendar events\n\n\nallow_phone - (\nfalse\n) Allow ads to initiate a phone call\n\n\nallow_sms - (\nfalse\n) Allow ads to author an SMS message \n\n\nallow_storage - (\nfalse\n) Allow ads to store images\n\n\nskippable - (\nfalse\n) Request ads that are skippable\n\n\ntrackable - (\ntrue\n) Disable ad tracking\n\n\nparams - (\nundefined\n) A hash of key-value strings that are passed-through in the ad request\n\n\n\n\nGet step-by-step instructions on how to specify parameters through the MoPub UI in MoPub\na \nAd Network Documentation\n.\n\n\nRewarded Video\n#\n\n\nGetting Started with Rewarded Video\n#\n\n\nBefore integrating the SpotX custom event class library for MoPub rewarded video,\nplease review the \nRewarded Video for iOS Documentation\n.\n\n\nFollow the instructions in the \nBasic Integration\n section of the documentation.  If you have already installed the SpotX-MoPub-Plugin,\nyou will have completed step one of the integration process.\n\n\nRewarded Video - Mediation Settings\n#\n\n\nMediation settings may be used to pass additional configuration parameters to the SpotX network during the rewarded video initialization\ncall.\n\n\nThe SpotX Rewarded Video interface currently only supports \ninstance mediation settings\n. The current SpotX mediation settings class\ncontains the following parameter:\n\n\n\n\nchannel_id - Your SpotX publisher channel ID\n\n\n\n\nThe following code snippet demonstrates how to use the SpotX mediation settings object.\n\n\n-(\nvoid\n)\n \nloadRewardedVideo\n \n{\n\n    \n// Initialize rewarded video before loading any ads.\n\n    \n[[\nMoPub\n \nsharedInstance\n]\n \ninitializeRewardedVideoWithGlobalMediationSettings\n:\nnil\n \ndelegate\n:\nself\n];\n\n\n    \n// Create the SpotX Mediation Settings object\n\n    \nSpotXInstanceMediationSettings\n \n*\n \nsettings\n \n=\n \n[[\nSpotXInstanceMediationSettings\n \nalloc\n]\n \ninit\n];\n\n\n    \n// Set the SpotX channel ID\n\n    \nsettings\n.\nchannel_id\n \n=\n \n@\n[SpotX publisher channel ID]\n;\n\n\n    \n// Fetch the rewarded video ad.\n\n    \n[\nMPRewardedVideo\n \nloadRewardedVideoAdWithAdUnitID\n:@\n\u201c\n[\nPlaceholder\n \nAd\n \nUnit\n \nID\n]\n\u201c\n \nwithMediationSettings\n:\nsettings\n];\n\n\n}\n\n\n\n\n\n\nFor a more detailed example of using the SpotX-MoPub-Plugin, checkout our \nSpotX-MoPub Integration Testing App for iOS\n on GitHub.", 
            "title": "MoPub iOS"
        }, 
        {
            "location": "/ios-mopub-adapter/#who-can-use-the-plugin", 
            "text": "To use the plugin, you need to be a SpotX publisher and have an active account with MoPub.", 
            "title": "Who Can Use the Plugin"
        }, 
        {
            "location": "/ios-mopub-adapter/#become-a-spotx-publisher", 
            "text": "If you are not already a SpotX publisher, click  here  to apply.", 
            "title": "Become a SpotX Publisher"
        }, 
        {
            "location": "/ios-mopub-adapter/#create-a-mopub-account", 
            "text": "If you don t yet have a MoPub account, click  here  to sign up.", 
            "title": "Create a MoPub Account"
        }, 
        {
            "location": "/ios-mopub-adapter/#what-the-plugin-does", 
            "text": "The plugin allows the SpotX SDK and the MoPub SDK to communicate with each other seamlessly. To use this new plugin, SpotX publishers will need to integrate the SpotX SDK and the MoPub SDK into their App.", 
            "title": "What the Plugin Does"
        }, 
        {
            "location": "/ios-mopub-adapter/#how-to-install-the-plugin", 
            "text": "There are two ways to install this plugin:", 
            "title": "How to Install the Plugin"
        }, 
        {
            "location": "/ios-mopub-adapter/#cocoapods-preferred", 
            "text": "Simply add the following to your Podfile.  pod   SpotX-MoPub-Plugin", 
            "title": "CocoaPods (preferred)"
        }, 
        {
            "location": "/ios-mopub-adapter/#source-code", 
            "text": "Download the source code and import it in your Xcode project. The project is available from our  Github repository .", 
            "title": "Source Code"
        }, 
        {
            "location": "/ios-mopub-adapter/#configuration", 
            "text": "Use the custom data field to pass configuration parameters to the SpotX plugin. Additional details are available in the documentation for  MoPub Custom Events . The custom data is a  JSON  object with the following required keys:   channel_id - Your SpotX publisher channel ID  iab_category - IAB category used to classify your app  iab_section - IAB category subsection used to classify your app  appstore_url - URL to your app in the Apple App store.  app_domain - Internet domain for your app s website   In addition to the required properties, you may also include any of the following optional keys (*default value in parenthesis):   use_https - ( false ) All network requests will be done over HTTPS  use_native_browser - ( true ) If false, ad interactions will be displayed in an internal browser rather than the system default  allow_calendar - ( false ) Allow ads to create calendar events  allow_phone - ( false ) Allow ads to initiate a phone call  allow_sms - ( false ) Allow ads to author an SMS message   allow_storage - ( false ) Allow ads to store images  skippable - ( false ) Request ads that are skippable  trackable - ( true ) Disable ad tracking  params - ( undefined ) A hash of key-value strings that are passed-through in the ad request   Get step-by-step instructions on how to specify parameters through the MoPub UI in MoPub a  Ad Network Documentation .", 
            "title": "Configuration"
        }, 
        {
            "location": "/ios-mopub-adapter/#rewarded-video", 
            "text": "", 
            "title": "Rewarded Video"
        }, 
        {
            "location": "/ios-mopub-adapter/#getting-started-with-rewarded-video", 
            "text": "Before integrating the SpotX custom event class library for MoPub rewarded video,\nplease review the  Rewarded Video for iOS Documentation .  Follow the instructions in the  Basic Integration  section of the documentation.  If you have already installed the SpotX-MoPub-Plugin,\nyou will have completed step one of the integration process.", 
            "title": "Getting Started with Rewarded Video"
        }, 
        {
            "location": "/ios-mopub-adapter/#rewarded-video-mediation-settings", 
            "text": "Mediation settings may be used to pass additional configuration parameters to the SpotX network during the rewarded video initialization\ncall.  The SpotX Rewarded Video interface currently only supports  instance mediation settings . The current SpotX mediation settings class\ncontains the following parameter:   channel_id - Your SpotX publisher channel ID   The following code snippet demonstrates how to use the SpotX mediation settings object.  -( void )   loadRewardedVideo   { \n     // Initialize rewarded video before loading any ads. \n     [[ MoPub   sharedInstance ]   initializeRewardedVideoWithGlobalMediationSettings : nil   delegate : self ]; \n\n     // Create the SpotX Mediation Settings object \n     SpotXInstanceMediationSettings   *   settings   =   [[ SpotXInstanceMediationSettings   alloc ]   init ]; \n\n     // Set the SpotX channel ID \n     settings . channel_id   =   @ [SpotX publisher channel ID] ; \n\n     // Fetch the rewarded video ad. \n     [ MPRewardedVideo   loadRewardedVideoAdWithAdUnitID :@ \u201c [ Placeholder   Ad   Unit   ID ] \u201c   withMediationSettings : settings ];  }   For a more detailed example of using the SpotX-MoPub-Plugin, checkout our  SpotX-MoPub Integration Testing App for iOS  on GitHub.", 
            "title": "Rewarded Video - Mediation Settings"
        }
    ]
}